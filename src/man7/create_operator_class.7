. mso zh.tmac
.\" auto-generated by docbook2man-spec $Revision: 1.1 $
.TH "CREATE OPERATOR CLASS" "7" "2003-11-02" "SQL - Language Statements" "SQL Commands"
.SH NAME
CREATE OPERATOR CLASS \- 定义一个新的操作符类

.SH SYNOPSIS
.sp
.nf
CREATE OPERATOR CLASS \fIname\fR [ DEFAULT ] FOR TYPE \fIdata_type\fR USING \fIindex_method\fR AS
  {  OPERATOR \fIstrategy_number\fR \fIoperator_name\fR [ ( \fIop_type\fR, \fIop_type\fR ) ] [ RECHECK ]
   | FUNCTION \fIsupport_number\fR \fIfuncname\fR ( \fIargument_type\fR [, ...] )
   | STORAGE \fIstorage_type\fR
  } [, ... ]
.sp
.fi
.SH "DESCRIPTION 描述"
.PP
\fBCREATE OPERATOR CLASS\fR 定义一个新的操作符表。 一个操作符表定义一种特定的数据类型可以如何与一种索引一起使用。 操作符表声明特定的操作符可以为这种数据类型以及这种索引方法填充特定角色或者"策略"。 操作符表还声明索引方法在为一个索引字段选定该操作符表的时候要使用的支持过程。 所有操作符表使用的函数和操作符都必须在创建操作符表之前定义。
.PP
 如果给出了模式名字，那么操作符表就在指定的模式中创建。 否则就在当前模式中创建（在搜索路径前面的那个；参阅 CURRENT_SCHEMA()）。 在同一个模式中的两个操作符表可以有同样的名字，但它们必须用于不同的索引方法。
.PP
 定义操作符表的用户成为其所有者。目前，创造者必须是超级用户。 （作这样的限制是因为一个有问题的操作符表定义会让服务器困惑，甚至崩溃。）
.PP
\fBCREATE OPERATOR CLASS\fR  目前并不检查这个类定义是否包含所有索引方法需要操作符以及函数。 定义一个合法的操作符表是用户的责任。
.PP
 参考 ``Interfacing Extensions to Indexes'' 获取更多信息。
.SH "PARAMETERS 参数"
.TP
\fB\fIname\fB\fR
 将要创建的操作符表的名字。名字可以用模式修饰。
.TP
\fBDEFAULT\fR
 如果出现了这个键字，那么该操作符表将成为它的数据类型的缺省操作符表。 对于某个数据类型和访问方式而言，最多可以有一个操作符表是缺省的。
.TP
\fB\fIdata_type\fB\fR
 这个操作符表处理的字段数据类型。
.TP
\fB\fIindex_method\fB\fR
 这个操作符表处理的索引访问方式的名字。
.TP
\fB\fIstrategy_number\fB\fR
 一个操作符和这个操作符表关联的索引访问方式的策略数。
.TP
\fB\fIoperator_name\fB\fR
 一个和该操作符表关联的操作符的名字（可以用模式修饰）。
.TP
\fB\fIop_type\fB\fR
 一个操作符的输入数据类型，或者是 NONE 表示左目或者右目操作符。 通常情况下可以省略输入数据类型，因为这个时候它们和操作符表的数据类型相同。
.TP
\fBRECHECK\fR
 如果出现，那么索引对这个操作符是"lossy"（有损耗的）， 因此，使用这个索引检索的行必须重新检查，以保证它们真正满足和此操作符相关的条件子句。
.TP
\fB\fIsupport_number\fB\fR
 索引方法对一个与操作符表关联的函数的支持过程数。
.TP
\fB\fIfuncname\fB\fR
 一个函数的名字（可以有模式修饰），这个函数是索引访问方式对此操作符表的支持过程。
.TP
\fB\fIargument_types\fB\fR
 函数的参数数据类型。
.TP
\fB\fIstorage_type\fB\fR
 实际存储在索引里的数据类型。通常它和字段数据类型相同， 但是一些索引方法（到目前为止只有 GIST）允许它是不同的。 除非索引方法允许使用一种不同的类型，否则必须省略 STORAGE 子句。
.PP
OPERATOR，FUNCTION，和 STORAGE  子句可以按照任意顺序出现。
.PP
.SH "EXAMPLES 例子"
.PP
 下面的例子命令为数据类型 _int4（int4 的数组）定义了一个 GiST 索引操作符表。 参阅 contrib/intarray/ 获取完整的例子。
.sp
.nf
CREATE OPERATOR CLASS gist__int_ops
    DEFAULT FOR TYPE _int4 USING gist AS
        OPERATOR        3       &&,
        OPERATOR        6       =       RECHECK,
        OPERATOR        7       @,
        OPERATOR        8       ~,
        OPERATOR        20      @@ (_int4, query_int),
        FUNCTION        1       g_int_consistent (internal, _int4, int4),
        FUNCTION        2       g_int_union (bytea, internal),
        FUNCTION        3       g_int_compress (internal),
        FUNCTION        4       g_int_decompress (internal),
        FUNCTION        5       g_int_penalty (internal, internal, internal),
        FUNCTION        6       g_int_picksplit (internal, internal),
        FUNCTION        7       g_int_same (_int4, _int4, internal);
.sp
.fi
.SH "COMPATIBILITY 兼容性"
.PP
\fBCREATE OPERATOR CLASS\fR 是一个 PostgreSQL 扩展。 在 SQL 标准中没有 CREATE OPERATOR CLASS。
.SH "SEE ALSO 参见"
ALTER OPERATOR CLASS [\fBalter_operator_class\fR(7)], DROP OPERATOR CLASS [\fBdrop_operator_class\fR(l)]
.SH "译者"
.B Postgresql 中文网站
.B 何伟平 <laser@pgsqldb.org>
