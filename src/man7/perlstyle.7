. mso zh.tmac
.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLSTYLE 1"
.TH PERLSTYLE 7 "2003-11-25" "perl v5.8.3" "Perl Programmers Reference Guide"
.SH "NAME"
perlstyle \- Perl 风格指南
.SH "DESCRIPTION 描述"
.IX Header "DESCRIPTION"
每个程序员当然都会有自己的编程风格，但是有一些一般性的原则可以使得我们的程序更易于阅读，理解，以及维护。
.PP
最重要的是使用 \fB\-w\fR 选项. 如果必须关闭该选项，可以用 \f(CW\*(C`no warnings\*(C'\fR 或变量 \f(CW$^W\fR 来在一定的代码段中关闭它. 你还应该使用 \f(CW\*(C`use strict\*(C'\fR 除非你清楚不使用它的理由.  \f(CW\*(C`use sigtrap\*(C'\fR 和 \f(CW\*(C`use diagnostics\*(C'\fR 也是非常有用的.
.PP
关于代码美学,  Larry 大概只强烈的关心一件事情：多行块的结束花括号应该与开始的关键字对齐. 除了这个, 还有一些不是那么重要的事情:
.IP "\(bu" 4
4\-列缩进.
.IP "\(bu" 4
如果可能的话，开始的花括号与关键词最好放在同一行，否则对齐.
.IP "\(bu" 4
多行的块的开始的花括号之前应当有空格
.IP "\(bu" 4
单行的块放在一行，包括花括号.
.IP "\(bu" 4
分号前不要空格.
.IP "\(bu" 4
在短的单行块中省略分号.
.IP "\(bu" 4
操作符周围打空格.
.IP "\(bu" 4
在“复合”下标周围打空格 (在括号中).
.IP "\(bu" 4
在不同功能的块之间打空行.
.IP "\(bu" 4
else另起一行写
.IP "\(bu" 4
函数与括号间不要空格
.IP "\(bu" 4
每个逗号后打空格.
.IP "\(bu" 4
长句子在操作符后截断 ( "and" 和 "or" 除外).
.IP "\(bu" 4
关闭括号后打空格.
.IP "\(bu" 4
相关项之间以列对齐.
.IP "\(bu" 4
在不影响清晰的情况下尽量减少标点符号.
.PP
Larry 这样做当然有他的原因, 不过他没有要求别人都和他一样.
.PP
以下意见供您参考:
.IP "\(bu" 4
可以那样做并不意味着应该那样做. Perl 设计为作每件事都可以用好几种方法, 你应该选择最可读的一种. 例如
.Sp
.Vb 1
\&    open(FOO,$foo) || die "Can't open $foo: $!";
.Ve
.Sp
好于
.Sp
.Vb 1
\&    die "Can't open $foo: $!" unless open(FOO,$foo);
.Ve
.Sp
因为第二种办法掩盖了句子中的主要内容。另一方面
.Sp
.Vb 1
\&    print "Starting analysis\en" if $verbose;
.Ve
.Sp
好于
.Sp
.Vb 1
\&    $verbose && print "Starting analysis\en";
.Ve
.Sp
因为主要关键不在于是否用户输入了 \fB\-v\fR。
.Sp
类似的，因为一个操作符允许使用默认参数，不意味着你必须使用默认值。默认值是为懒惰的系统程序员书写只运行一次的程序准备的。如果你需要你的程序尽量可读，考虑给出参数。
.Sp
根据相同的原则，在很多地方即使你可以忽略括号也不意味着你应当这样做：
.Sp
.Vb 2
\&    return print reverse sort num values %array;
\&    return print(reverse(sort num (values(%array))));
.Ve
.Sp
如果有疑义，使用括号。至少它使得可怜的笨蛋能在 \fBvi\fR 中使用 % 键来跳转
.Sp
甚至你没有疑义的时候，为那个将来维护你的代码的家伙的精神健康考虑一下吧，并且他有可能把括号放错地方。
.IP "\(bu" 4
在程序中使用 last 跳出，而不要在开始和结束时用奇怪的跳转退出循环。把它 "缩出" 几格以利于察看:
.Sp
.Vb 7
\&    LINE:
\&        for (;;) {
\&            statements;
\&          last LINE if $foo;
\&            next LINE if /^#/;
\&            statements;
\&        }
.Ve
.IP "\(bu" 4
别害怕使用循环标记--它们用来增强可读性并且允许多层循环中断. 参见前例.
.IP "\(bu" 4
避免在空上下文中使用 grep() (或 map()) 或 `反引号` , 那样，你就丢弃了它们的返回值. 使用它们是为了得到返回值，否则，使用 foreach() 或是 system() 好了.
.IP "\(bu" 4
考虑移植的时候，某些特性可能不是在所有的机器上都能够得到支持, 这时可以用 eval来测试. 如果你知道提供特定功能的版本或是补丁, 你可以察看 \f(CW$]\fR (也就是 \f(CW\*(C`English\*(C'\fR 中的 \f(CW$PERL_VERSION\fR) 来确定当前的版本.  \f(CW\*(C`Config\*(C'\fR 模块也会提供perl在安装时 \fBConfigure\fR 程序测得的值.
.IP "\(bu" 4
使用明确的标识符，你要是想不起来标识符的意思，那就麻烦了。
.IP "\(bu" 4
短标识符如 \f(CW$gotit\fR 虽然没什么不好, 但是用下划线来分割单词可以增加可读性. 如 \f(CW$var_names_like_this\fR 好于 \f(CW$VarNamesLikeThis\fR,对不以英语为母语的人更是如此.同样，在使用 \s-1VAR_NAMES_LIKE_THIS\s0 时也要遵循这个规则。
.Sp
包名称有时不遵守这个约定. Perl 为 \*(L"pragma\*(R" 保留小写的包名称，比如 integer 和 strict. 其他模块名称应该用大写字母开始，但是一般不用下划线来分隔，因为当使用模块名来作文件名时，这在某些系统会出现错误.
.IP "\(bu" 4
使用大小写可以区分变量的作用域。例如:
.Sp
.Vb 3
\&    $ALL_CAPS_HERE   常量 (小心！不要与 perl 变量冲突!)
\&    $Some_Caps_Here  包作用域 global/static
\&    $no_caps_here    函数作用域 my() 或 local() 变量
.Ve
.Sp
函数和方法名多用小写. 如, \f(CW$obj\fR\->\fIas_string()\fR.
.Sp
用下划线开始的函数名或变量名，表示该函数或变量只能在定义它的包中使用.
.IP "\(bu" 4
如果你的正则表达式较复杂，用 \f(CW\*(C`/x\*(C'\fR 来增加注释行或空行以利于阅读. 当其中有很多斜杠或反斜杠时，不要用反斜杠来作正则表达式的定界符.
.IP "\(bu" 4
使用 "and" 和 "or" 操作符以减少使用括号, 尽量少用 && 和 ||. 调用子程序时尽量少用"&"和括号，可以把子程序当做函数或列表操作符来调用.
.IP "\(bu" 4
使用 here documents 代替大量的 print() 语句.
.IP "\(bu" 4
相关语句用列对齐方式来书写，特别是当一行放不下的时候.
.Sp
.Vb 4
\&    $IDX = $ST_MTIME;
\&    $IDX = $ST_ATIME       if $opt_u;
\&    $IDX = $ST_CTIME       if $opt_c;
\&    $IDX = $ST_SIZE        if $opt_s;
.Ve
.Sp
.Vb 3
\&    mkdir $tmpdir, 0700 or die "can't mkdir $tmpdir: $!";
\&    chdir($tmpdir)      or die "can't chdir $tmpdir: $!";
\&    mkdir 'tmp',   0777 or die "can't mkdir $tmpdir/tmp: $!";
.Ve
.IP "\(bu" 4
总是检测返回值. 错误信息被送往 STDERR, 包括出错的程序、失败的系统调用及参数、并且（非常重要的）包括标准错误信息. 这里是一个简单而完整的例子:
.Sp
.Vb 1
\&    opendir(D, $dir)     or die "can't opendir $dir: $!";
.Ve
.IP "\(bu" 4
把翻译列表以列对齐方式排列:
.Sp
.Vb 2
\&    tr [abc]
\&       [xyz];
.Ve
.IP "\(bu" 4
考虑可重用性. 请考虑使用模块或对象. 考虑使用 use strict 和 use warnings (或 -w) 使代码清晰明确. 考虑改变世界观。
.IP "\(bu" 4
要一致，要兼容。
.IP "\(bu" 4
要漂亮，要美观。
.SH "译者"
.B redcandle <redcandle51@chinaren.com>
.B 20010530
.SH "中文手册页翻译计划"
.B http://cmpp.linuxforum.net
