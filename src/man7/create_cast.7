. mso zh.tmac
.\" auto-generated by docbook2man-spec $Revision: 1.1 $
.TH "CREATE CAST" "7" "2003-11-02" "SQL - Language Statements" "SQL Commands"
.SH NAME
CREATE CAST \- 定义一个用户定义的转换

.SH SYNOPSIS
.sp
.nf
CREATE CAST (\fIsourcetype\fR AS \fItargettype\fR)
    WITH FUNCTION \fIfuncname\fR (\fIargtype\fR)
    [ AS ASSIGNMENT | AS IMPLICIT ]

CREATE CAST (\fIsourcetype\fR AS \fItargettype\fR)
    WITHOUT FUNCTION
    [ AS ASSIGNMENT | AS IMPLICIT ]
.sp
.fi
.SH "DESCRIPTION 描述"
.PP
\fBCREATE CAST\fR 定义一个新的转换。 一个转换说明如何在两个类型之间进行转换。比如：
.sp
.nf
SELECT CAST(42 AS text);
.sp
.fi
通过调用前面声明的一个函数，把整数常量 42 转换成类型 text， 在这个例子里是 text(int4)。（如果没有预先定义好合适的转换，那么这个转换失败。）
.PP
两种类型可以是二进制兼容的， 意思是它们之间可以"自由转换"而不用调用任何函数。 这就需要那个对应的数值使用同样的内部表现形式。 比如，类型 text 和 varchar 是二进制兼容的。
.PP
缺省时，只有在明确要求转换的情况下才调用一个转换， 也就是一个明确的 CAST(x AS typename)， x::typename，或者 typename(x) 构造。
.PP
如果转换标记为 AS ASSIGNMENT，那么在赋一个数值给目标数据类型的字段的时候， 可以隐含调用它。比如，假设 foo.f1 是一个类型为 text 的字段，那么
.sp
.nf
INSERT INTO foo (f1) VALUES (42);
.sp
.fi
如果从类型 integer 到类型 text 的转换标记为 AS ASSIGNMENT， 上面的这句就被允许，否则就不允许。（我们通常用术语赋值转换来描述这种转换。）
.PP
如果转换标记为 AS IMPLICIT，那么它就可以在任何环境里调用， 不管是赋值还是在表达式的内部。比如，因为 || 接受 text 操作数，
.sp
.nf
SELECT 'The time is ' || now();
.sp
.fi
将只有在类型 timestamp 到 text 的转换标记为 AS IMPLICIT 的时候才允许。否则我们就必须明确书写转换， 比如
.sp
.nf
SELECT 'The time is ' || CAST(now() AS text);
.sp
.fi
（我们通常使用术语隐含转换来描述这种类型的转换。）
.PP
在标记转换为隐含的这个问题上保守一些是明智的。 过于丰富的隐含转换路径会导致 PostgreSQL 选择让人奇怪的命令的解析， 或者是完全不能解析命令，因为存在多个可能的解析。 一条好的拇指定律是，只有在同一个通用类型表里面的那些可以保留转换信息的类型之间才标记为可隐含调用转换。 比如，从 int2 到 int4  可以合理地标记为隐含转换，但是从 float8 到 int4  可能应该是标记为赋值转换。跨类型表的转换，比如 text 到 int4，最好是只能明确地转换。
.PP
要想创建一个转换，你必须拥有源或者目的数据类型。要创建一个二进制兼容的转换， 你必须是超级用户。（做这个限制是因为一种有问题的二进制兼容转换可以很容易摧毁服务器。）
.SH "PARAMETERS 参数"
.TP
\fB\fIsourcetype\fB\fR
转换的源数据类型。
.TP
\fB\fItargettype\fB\fR
转换的目标数据类型。
.TP
\fB\fIfuncname\fB(\fIargtype\fB)\fR
用于执行转换的函数。这个函数名可以是用模式名修饰的。 如果它没有用模式名修饰，那么该函数将从路径中找出来。 参数类型必须和源数据类型相同，结果数据类型必须匹配转换的目标类型。
.TP
\fBWITHOUT FUNCTION\fR
表示源数据类型和目标数据类型是二进制兼容的， 所以不需要什么函数来执行转换。 
.TP
\fBAS ASSIGNMENT\fR
表示转换可以在赋值环境里隐含调用。
.TP
\fBAS IMPLICIT\fR
表示这个转换可以在任何环境里隐含调用。
.SH "NOTES 注意"
.PP
用 DROP CAST 删除用户定义的转换。
.PP
请注意，如果你想能双向转换类型，那么你需要明确地定义两个方向的转换。
.PP
在 PostgreSQL 7.3 之前，如果一个函数的名字和一个数据类型相同， 并且返回该种数据类型，而且还接受另外一种类型的参数自动就是一个转换函数。 这个传统随着模式的引入以及为了能在系统表种表示二进制兼容的转换就被废弃了。 （内置的转换函数仍然遵循这个命名规则，但是它们现在必须在系统表 pg_cast 里显示为转换。）
.SH "EXAMPLES 例子"
.PP
要使用函数 int4(text) 创建一个从类型 text 到类型 int4的转换：
.sp
.nf
CREATE CAST (text AS int4) WITH FUNCTION int4(text);
.sp
.fi
（这个转换在系统中已经预先定义了。）
.SH "COMPATIBILITY 兼容性"
.PP
\fBCREATE CAST\fR 命令遵循 SQL99，只不过 SQL99 没有提供二进制兼容类型。AS IMPLICIT 也是 PostgreSQL  的扩展。
.SH "SEE ALSO 参见"
.PP
CREATE FUNCTION [\fBcreate_function\fR(7)],
CREATE TYPE [\fBcreate_type\fR(7)],
DROP CAST [\fBdrop_cast\fR(7)]
.SH "译者"
.B Postgresql 中文网站
.B 何伟平 <laser@pgsqldb.org>