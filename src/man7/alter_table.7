. mso zh.tmac
.\" auto-generated by docbook2man-spec $Revision: 1.1 $
.TH "ALTER TABLE" "7" "2003-11-02" "SQL - Language Statements" "SQL Commands"
.SH NAME
ALTER TABLE \- 修改表的定义

.SH SYNOPSIS
.sp
.nf
ALTER TABLE [ ONLY ] \fIname\fR [ * ]
    ADD [ COLUMN ] \fIcolumn\fR \fItype\fR [ \fIcolumn_constraint\fR [ ... ] ]
ALTER TABLE [ ONLY ] \fIname\fR [ * ]
    DROP [ COLUMN ] \fIcolumn\fR [ RESTRICT | CASCADE ]
ALTER TABLE [ ONLY ] \fIname\fR [ * ]
    ALTER [ COLUMN ] \fIcolumn\fR { SET DEFAULT \fIexpression\fR | DROP DEFAULT }
ALTER TABLE [ ONLY ] \fIname\fR [ * ]
    ALTER [ COLUMN ] \fIcolumn\fR { SET | DROP } NOT NULL
ALTER TABLE [ ONLY ] \fIname\fR [ * ]
    ALTER [ COLUMN ] \fIcolumn\fR SET STATISTICS \fIinteger\fR
ALTER TABLE [ ONLY ] \fIname\fR [ * ]
    ALTER [ COLUMN ] \fIcolumn\fR SET STORAGE { PLAIN | EXTERNAL | EXTENDED | MAIN }
ALTER TABLE [ ONLY ] \fIname\fR [ * ]
    SET WITHOUT OIDS
ALTER TABLE [ ONLY ] \fIname\fR [ * ]
    RENAME [ COLUMN ] \fIcolumn\fR TO \fInew_column\fR
ALTER TABLE \fIname\fR
    RENAME TO \fInew_name\fR
ALTER TABLE [ ONLY ] \fIname\fR [ * ]
    ADD \fItable_constraint\fR
ALTER TABLE [ ONLY ] \fIname\fR [ * ]
    DROP CONSTRAINT \fIconstraint_name\fR [ RESTRICT | CASCADE ]
ALTER TABLE \fIname\fR
    OWNER TO \fInew_owner\fR
ALTER TABLE \fIname\fR
    CLUSTER ON \fIindex_name\fR
.sp
.fi
.SH "DESCRIPTION 描述"
.PP
\fBALTER TABLE\fR 变更一个现存表的定义。它有好几种子形式：
.TP
\fBADD COLUMN\fR
 这种形式用和 CREATE TABLE [\fBcreate_table\fR(7)]  里一样的语法向表中增加一个新的字段。
.TP
\fBDROP COLUMN\fR
 这种形式从表中删除一个字段。请注意，和这个字段相关的索引和表约束也会被自动删除。 如果任何表之外的对象依赖于这个字段， 你必须说 CASCADE，比如，外键参考，视图等等。
.TP
\fBSET/DROP DEFAULT\fR
 这种形式为一个字段设置或者删除缺省值。请注意缺省值只应用于随后的 INSERT 命令； 它们不会导致已经在表中的行的数值的修改。我们也可以为视图创建缺省， 这个时候它们是在视图的 ON INSERT 规则应用之前插入 INSERT 语句中去的。
.TP
\fBSET/DROP NOT NULL\fR
 这些形式修改一个字段是否标记为允许 NULL 值或者是拒绝 NULL 值。 如果表在字段中包含非空值，那么你只可以 SET NOT NULL。
.TP
\fBSET STATISTICS\fR
This form
 这个形式为随后的
ANALYZE [\fBanalyze\fR(7)] 操作设置每字段的统计收集目标。 目标的范围可以在 0 到 1000 之内设置；另外，把他设置为 -1 则表示重新恢复到使用系统缺省的统计目标。
.TP
\fBSET STORAGE\fR
 这种形式为一个字段设置存储模式。这个设置控制这个字段是内联保存还是保存在一个附属的表里，以及数据是否要压缩。 PLAIN 必需用于定长的数值，比如 integer，并且是内联的，不压缩的。 MAIN 用于内联，可压缩的数据。 EXTERNAL 用于外部保存，不压缩的数据， 而 EXTENDED 用于外部的压缩数据。 EXTENDED 是所有支持它的数据的缺省。 使用 EXTERNAL 将令在 text 字段上的子字串操作更快， 付出的代价是增加了存储空间。
.TP
\fBSET WITHOUT OIDS\fR
 从表中删除 oid 字段。从表中删除（设置为没有）oid 同样不会立即发生。 OID 使用的空间将在元组被更新的时候回收。不更新元组的时候， OID 的空间和数值的维护都是不确定的。这个过程语义上类似 DROP COLUMN  过程。
.TP
\fBRENAME\fR
RENAME 形式改变一个表的名字（或者是一个索引，一个序列，或者一个视图）或者是表中一个独立字段的名字。 它对存储的数据没有任何影响。
.TP
\fBADD \fItable_constraint\fB\fR
 这个形式给表增加一个新的约束，用的语法和
CREATE TABLE [\fBcreate_table\fR(7)] 一样。
.TP
\fBDROP CONSTRAINT\fR
 这个形式删除一个表上的约束。 目前，在表上的约束不要求有唯一的名字，因此可能有多个约束匹配声明的名字。 所有这样的约束都将被删除。
.TP
\fBOWNER\fR
 这个形式改变表，索引，序列或者视图的所有者为指定所有者。
.TP
\fBCLUSTER\fR
 这种形式为将来对表进行的 CLUSTER [\fBcluster\fR(7)]
操作做标记。
.PP
.PP
 要使用 ALTER TABLE，你必需拥有该表； 除了 ALTER TABLE OWNER 之外，它只能由超级用户执行。
.SH "PARAMETERS 参数"
.TP
\fB\fIname\fB\fR
 试图更改的现存表（可能有模式修饰）的名称。 如果声明了 ONLY，则只更改该表。 如果没有声明 ONLY，则该表及其所有后代表（如果有）都被更新。 我们可以在表名字后面附加一个 * 表示后代表都被扫描，但是在目前的版本里，这是缺省行为。 （在7.1之前的版本，ONLY 是缺省的行为。）缺省可以通过改变配置选项 SQL_INHERITANCE 来改变。
.TP
\fB\fIcolumn\fB\fR
 现存或新的字段名称。
.TP
\fB\fItype\fB\fR
 新字段的类型。
.TP
\fB\fInew_column\fB\fR
 新字段的类型。
.TP
\fB\fInew_name\fB\fR
 表的新名称。
.TP
\fB\fItable_constraint\fB\fR
 表的新的约束定义。
.TP
\fB\fIconstraint_name\fB\fR
 要删除的现有约束的名字。
.TP
\fB\fInew_owner\fB\fR
 该表的新所有者的用户名。
.TP
\fB\fIindex_name\fB\fR
 要标记为建簇的表上面的索引名字。
.TP
\fBCASCADE\fR
 自动删除依赖于被依赖字段或者约束的对象（比如，引用该字段的视图）。
.TP
\fBRESTRICT\fR
 如果字段或者约束还有任何依赖的对象，则拒绝删除该字段。 这是缺省行为。
.SH "NOTES 注意"
.PP
 COLUMN 关键字是多余的，可以省略。
.PP
 在目前的 ADD COLUMN实现里还不支持新列/字段的缺省（值）和 NOT NULL 子句。 新字段开始存在时所有值都是 NULL。 不过你可以随后用 ALTER TABLE 的 SET DEFAULT  形式设置缺省（值）。（你可能还想用
UPDATE [\fBupdate\fR(7)] 把已存在行更新为缺省值。） 如果你想标记该字段为非 null，在你为该字段的所有行输入非 null 值之后用 SET NOT NULL。
.PP
DROP COLUMN 命令并不是物理上把字段删除， 而只是简单地把它标记为 SQL 操作中不可见的。随后对该表的插入和更新将在该字段存储一个 NULL。 因此，删除一个字段是很快的，但是它不会立即缩减你的表在磁盘上的大小，因为被删除了的字段占据的空间还没有回收。 这些空间将随着现有的行的更新而得到回收。要立即回收空间， 我们可以做一个UPDATE所有行的假动作，然后立即 vacuum， 象这样：
.sp
.nf
UPDATE table SET col = col;
VACUUM FULL table;
.sp
.fi
.PP
 如果表有任何后代表，那么如果不在后代表上做同样的修改的话， 就不允许在父表上增加或者重命名一个字段，也就是说， ALTER TABLE ONLY将被拒绝。这样就保证了后代表总是有和父表匹配的字段。
.PP
 一个递归DROP COLUMN  操作将只有在后代表并不从任何其它父表中继承该字段并且从来没有独立定义该字段的时候才能删除一个后代表的字段。 一个非递归的DROP COLUMN（也就是，\fBALTER TABLE ONLY ... DROP COLUMN\fR）从来不会删除任何后代字段， 而是把他们标记为独立定义的，而不是继承的。
.PP
 不允许更改系统表结构的任何部分。
.PP
 请参考CREATE TABLE 部分获取更多有效参数的描述。 Chapter 5 ``Data Definition'' 里有更多有关继承的信息。
.SH "EXAMPLES 例子"
.PP
 向表中增加一个 varchar 列：
.sp
.nf
ALTER TABLE distributors ADD COLUMN address varchar(30);
.sp
.fi
.PP
 从表中删除一个字段：
.sp
.nf
ALTER TABLE distributors DROP COLUMN address RESTRICT;
.sp
.fi
.PP
 对现存列改名：
.sp
.nf
ALTER TABLE distributors RENAME COLUMN address TO city;
.sp
.fi
.PP
 更改现存表的名字∶
.sp
.nf
ALTER TABLE distributors RENAME TO suppliers;
.sp
.fi
.PP
 给一个字段增加一个非空约束：
.sp
.nf
ALTER TABLE distributors ALTER COLUMN street SET NOT NULL;
.sp
.fi
 从一个字段里删除一个非空约束：
.sp
.nf
ALTER TABLE distributors ALTER COLUMN street DROP NOT NULL;
.sp
.fi
.PP
 给一个表增加一个检查约束：
.sp
.nf
ALTER TABLE distributors ADD CONSTRAINT zipchk CHECK (char_length(zipcode) = 5);
.sp
.fi
.PP
 删除一个表和它的所有子表的监查约束：
.sp
.nf
ALTER TABLE distributors DROP CONSTRAINT zipchk;
.sp
.fi
.PP
 向表中增加一个外键约束：
.sp
.nf
ALTER TABLE distributors ADD CONSTRAINT distfk FOREIGN KEY (address) REFERENCES addresses (address) MATCH FULL;
.sp
.fi
.PP
 给表增加一个（多字段）唯一约束：
.sp
.nf
ALTER TABLE distributors ADD CONSTRAINT dist_id_zipcode_key UNIQUE (dist_id, zipcode);
.sp
.fi
.PP
 给一个表增加一个自动命名的主键约束，要注意的是一个表只能有一个主键：
.sp
.nf
ALTER TABLE distributors ADD PRIMARY KEY (dist_id);
.sp
.fi
.SH "COMPATIBILITY 兼容性"
.PP
ADD COLUMN 形式是兼容 SQL 标准的， 除了上面说的缺省（值）和 NOT NULL 约束外。 ALTER COLUMN 形式是完全兼容的。
.PP
 重命名表，列/字段，索引，和序列的名字是 PostgreSQL  对 SQL 的扩展。
.PP
\fBALTER TABLE DROP COLUMN\fR 可以用于删除表中的唯一的一个字段， 留下一个零字段的表。这是对 SQL 的扩展，它不允许零字段表。
.SH "译者"
.B Postgresql 中文网站
.B 何伟平 <laser@pgsqldb.org>
