. mso zh.tmac
.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..

.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLFAQ7 1"
.TH PERLFAQ7 7 "2003-11-25" "perl v5.8.3" "Perl Programmers Reference Guide"
.SH "NAME"
perlfaq7 \- 综合的问题 (2003/07/24 02:17:21)
.SH "DESCRIPTION 描述"
.IX Header "DESCRIPTION"
本节讨论综合的 Perl 语言问题，不适于在其他所有段落中讨论的问题
.Sh "我能拿到 Perl的 BNF/yacc/RE吗？"
.IX Subsection "Can I get a BNF/yacc/RE for the Perl language?"
没有 \s-1BNF\s0, 但是你可以从源代码的 perly.y 文件的 yacc 语法中自行归纳，如果你足够勇敢的话。语法依赖于非常智能的词法分析，因此也要准备好阅读 toke.c。
.PP
用 Chaim Frenkel的话：\*(L"Perl的语法无法被简化到可以用 BNF 表示。解析Perl的工作是分散於 yacc、lexer、烟雾和镜子之间。\*(R"
.Sh "$@%*这些符号是什麽意思？我怎麽知道何时该使用他们呢？"
.IX Subsection "What are all these $@%&* punctuation signs, and how do I know when to use them?"
它们都是类型限定符号，在 perldata 中详述：
.PP
.Vb 6
\&    $ 标量值，数字，字符串或引用
\&    @ 数组
\&    % 散列，关联数组
\&    & 子程序，也就是函数，过程，方法
\&    * 代表这个符号的所有类型。在版本4中，可以用作指针，但是在新的 perl 中可以只用引用就可以了
.Ve
.PP
有些其他的符号你可能会碰到但却不是指定形态用的有：
.PP
.Vb 2
\&    <> 这是用来从一个文件句柄里输入一份记录
\&    \e 取某样东西的引用
.Ve
.PP
注意 <\s-1FILE\s0> 不是用来指定文件类型，亦非此句柄的名字。它只是 将<>这个运算符作用在 FILE这个句柄上。在标量上下文 (scalar context) 中，它自 FILE 把手一次读入一行 (嗯，该说一笔记录，参看 $/)，在序列情境 (list context)下，则一次将 全部的内容读 入。当对档案使用开、关或其它 <>之外的动作、或甚至只是提到把 手时，切记不要使用 <>。下面的用法是正确的：\f(CW\*(C`eof(FH)\*(C'\fR, \f(CW\*(C`seek(FH, 0,
2)\*(C'\fR 以及 \*(L"copying from \s-1STDIN\s0 to \s-1FILE\s0\*(R".
.Sh "字串加引号或使用分号及逗号是否绝对必要/还是完全没必要？"
.IX Subsection "Do I always/never have to quote my strings or use semicolons and commas?"
通常一个没有冠上形态符号的字 (bareword)是不需被纳入引号里的，但在大多数的情况下或许该这麽做 (在 \f(CW\*(C`use strict\*(C'\fR 下则是必须的)。但由一个简单的字(不能是一个已定义的副函数之名称)所构成的索引值，和 \f(CW\*(C`=>\*(C'\fR 左端的运算子，都会被视为已纳入引号了：
.PP
.Vb 4
\&    这些                     和这些一样
\&    ------------            ---------------
\&    $foo{line}              $foo{"line"}
\&    bar => stuff            "bar" => stuff
.Ve
.PP
一个区块末端的分号可有可无，一个序列的最後一个逗号亦同。良好的写作风格 (参看perlstyle)中建议除了在单行程式 (one-liners)的情况外都将他们加上去：
.PP
.Vb 2
\&    if ($whoops) { exit 1 }
\&    @nums = (1, 2, 3);
.Ve
.PP
.Vb 7
\&    if ($whoops) {
\&        exit 1;
\&    }
\&    @lines = (
\&        "There Beren came from mountains cold",
\&        "And lost he wandered under leaves",
\&    );
.Ve
.Sh "我如何跳过一些传回值？"
.IX Subsection "How do I skip some return values?"
一种方法是将传回值当作序列来对待，然後用索引来指名其中的某个位置：
.PP
.Vb 1
\&        $dir = (getpwnam($user))[7];
.Ve
.PP
另一种方法就是在等号左端用 undef 作元素：
.PP
.Vb 1
\&    ($dev, $ino, undef, undef, $uid, $gid) = stat($file);
.Ve
.PP
也可以用一个列表片段来仅选择你需要的元素：
.PP
.Vb 1
\&        ($dev, $ino, $uid, $gid) = ( stat($file) )[0,1,4,5];
.Ve
.Sh "我如何暂时滤掉警告讯息？"
.IX Subsection "How do I temporarily block warnings?"
如果正在运行 Perl 5.6.0 或更高版本， \f(CW\*(C`use warnings\*(C'\fR 编用可以对警告如何产生进行很好的控制。参见 perllexwarn 中的细节
.PP
.Vb 4
\&    {
\&        no warnings;          # 暂时关掉警告讯息
\&        $a = $b + $c;         # 我知道这些变数可能未定义
\&    }
.Ve
.PP
如果运行旧版本的 Perl，变量 \f(CW$^W\fR (在 perlvar 中有记载) 控制了这个块的运行时警告：
.PP
.Vb 4
\&    {
\&        local $^W = 0;        # 暂时关掉警告讯息
\&        $a = $b + $c;         # 我知道这些变数可能未定义
\&    }
.Ve
.PP
注意，像所有的标点符号变数一样，目前不能对 \f(CW$^W\fR 用 my()，只能用 local()。
.Sh "什麽是一个扩充?"
.IX Subsection "What's an extension?"
一种从 Perl呼叫编译好的 C程式码的方法。阅读 perlxstut是个多了解扩充(extensions)的好方法。
.Sh "为何 Perl运算子的优先顺序和 C的不一样？"
.IX Subsection "Why do Perl operators have different precedence than C operators?"
事实上它们是相同的。所有 Perl自 C借过来的运算子都具备与原来在 C 中相同的优先顺序。问题出在那些 C没有的运算子，特别是那些将其右方一律当成序列情境对待的函数，例如 print, chmod, exec等等。这类的函数被称作序列运算子(\*(L"list operators\*(R")，在 perlop的优先顺序表中就是这麽称呼。
.PP
一个常犯的错误像是：
.PP
.Vb 1
\&    unlink $file || die "snafu";
.Ve
.PP
这会被解译器看成是：
.PP
.Vb 1
\&    unlink ($file || die "snafu");
.Ve
.PP
要避免此问题，须加上括号或是用超低优先的 \f(CW\*(C`or\*(C'\fR 运算子：
.PP
.Vb 2
\&    (unlink $file) || die "snafu";
\&    unlink $file or die "snafu";
.Ve
.PP
这些“英文的”运算子 (and, or, xor,及 not)是刻意设计成较一般序列运算子低的优先顺序，这就是为了解决前述的状况。
.PP
另一个拥有出人意料的优先顺序者为指数。它甚至高於负号，这使得 \f(CW\*(C`\-2**2\*(C'\fR变成负四而非正四。他同时也会“向右靠”(right-associate)，意思是说 \f(CW\*(C`2**3**2\*(C'\fR 代表二的九次方，而不是八的平方。
.PP
Although it has the same precedence as in C, Perl's \f(CW\*(C`?:\*(C'\fR operator
produces an lvalue.  This assigns \f(CW$x\fR to either \f(CW$a\fR or \f(CW$b\fR, depending
on the trueness of \f(CW$maybe:\fR
.PP
.Vb 1
\&    ($maybe ? $a : $b) = $x;
.Ve
.Sh "我如何声明/创建一个数据结构？"
.IX Subsection "How do I declare/create a structure?"
一般来说，我们不 ``声明'' 一个结构。用一个 (通常是匿名的) 散列的引用 (hash reference)即可。参看 perlref 以及 perldsc，里面有更多资料。以下是一个范例：
.PP
.Vb 3
\&    $person = {};                   # new anonymous hash
\&    $person->{AGE}  = 24;           # set field AGE to 24
\&    $person->{NAME} = "Nat";        # set field NAME to "Nat"
.Ve
.PP
如果你要的是更严谨的写法，看看 perltoot 。
.Sh "如何创建一个模块？"
.IX Subsection "How do I create a module?"
一个模组就是一个放在同名档案里的包裹(package)。例如，Hello::There模组会放在Hello/There.pm。perlmod 里有详尽说明。Exporter 也会很有帮助。如果你正在写一个 C 或是混合了 C及 Perl 的模组，那麽你就该读 perlxstut 。
.PP
The \f(CW\*(C`h2xs\*(C'\fR program will create stubs for all the important stuff for you:
.PP
.Vb 1
\&  % h2xs -XA -n My::Module
.Ve
.PP
The \f(CW\*(C`\-X\*(C'\fR switch tells \f(CW\*(C`h2xs\*(C'\fR that you are not using \f(CW\*(C`XS\*(C'\fR extension
code.  The \f(CW\*(C`\-A\*(C'\fR switch tells \f(CW\*(C`h2xs\*(C'\fR that you are not using the
AutoLoader, and the \f(CW\*(C`\-n\*(C'\fR switch specifies the name of the module.
See h2xs for more details.
.Sh "如何创建一个类？"
.IX Subsection "How do I create a class?"
perltoot 里面有对於类和对象的介绍， perlobj 和 perlbot 也有。
.Sh "如何知道一个变量是否是污染的？"
.IX Subsection "How can I tell if a variable is tainted?"
可以使用 Scalar::Util 模块中的 \fItainted()\fR 函数 (可从 CPAN 获取，也包含在 Perl 5.8.0 中)。参见 perlsec 中的 \*(L"Laundering and Detecting Tainted Data\*(R" 。
.Sh "什么是闭包？"
.IX Subsection "What's a closure?"
关於闭包的说明，请看 perlref 。
.PP
闭包 (closure)是个精确但又很难解释的计算机科学名词。在 Perl 里面，闭包是以匿名函数的形式来实现，具有持续参照位於该函数范围之外的文字式变数值的能力。这些外部的文字变数会神奇地保留它们在闭包函数最初定义时的值 (深连结)。
.PP
如果一个程式语言容许函数递回另一个函数的话 (像 Perl 就是)，闭包便具有意义。要注意的是，有些语言虽提供匿名函数的功能，但却无法正确处理闭包； Python 这个语言便是一例。如果要想多了解闭包的话，建议你去找本功能性程式设计的教科书来看。Scheme这个语言不仅支援闭包，更鼓励多加使用。
.PP
以下是个典型的产生函数的函数：
.PP
.Vb 3
\&    sub add_function_generator {
\&      return sub { shift + shift };
\&    }
.Ve
.PP
.Vb 2
\&    $add_sub = add_function_generator();
\&    $sum = $add_sub->(4,5);                # $sum is 9 now.
.Ve
.PP
闭包用起来就像是个 函数样板，其中保留了一些可以在稍後再填入的空格。 add_function_generator() 所递回的匿名函数在技术上来讲并不能算是一个闭包，因为它没有用到任何位在这个函数范围之外的文字变数。
.PP
把上面这个例子和下面这个 make_adder()函数对照一下，下面这个函数所递回的匿名函数中使用了一个外部的文字变数。这种指名外部函数的作法需要由 Perl递回一个适当的闭包，因此那个文字变数在匿名函数产生之时的值便永久地被锁进闭 包里。
.PP
.Vb 4
\&    sub make_adder {
\&        my $addpiece = shift;
\&        return sub { shift + $addpiece };
\&    }
.Ve
.PP
.Vb 2
\&    $f1 = make_adder(20);
\&    $f2 = make_adder(555);
.Ve
.PP
这样一来 \f(CW\*(C`&$f1($n)\*(C'\fR 永远会是 20加上你传进去的值 \f(CW$n\fR ，而 \&\f(CW\*(C`&$f2($n)\*(C'\fR 将 永远会是 555加上你传进去的值 $n。\f(CW$addpiece\fR 的值会在闭包中保留下来。
.PP
闭包在比较实际的场合中也常用得到，譬如当你想把一些程式码传入一个函数时：
.PP
.Vb 2
\&    my $line;
\&    timeout( 30, sub { $line = <STDIN> } );
.Ve
.PP
如果要执行的程式码当初是以字串的形式传入的话，即 \f(CW'$line = <STDIN>'\fR ，那麽 timeout() 这个假想的函数在回到该函数被呼叫时所在的范围後便无法再撷取 \f(CW$line\fR 这个文字变数的值了。
.Sh "什么是变量自杀，我应该怎样防止它？"
.IX Subsection "What is variable suicide and how can I prevent it?"
变数自杀指的是 (暂时或是永久)地失去一个变数的值。造成这个现象的原因是做范围界定的 my() 和 local()和闭包或 foreach()回圈变数及函数参数相互影响 所致。过去很容易偶尔丢失变量，现在就困难多了，可以试试这段代码：
.PP
.Vb 6
\&    my $f = "foo";
\&    sub T {
\&      while ($i++ < 3) { my $f = $f; $f .= "bar"; print $f, "\en" }
\&    }
\&    T;
\&    print "Finally $f\en";
.Ve
.PP
有叁个 \*(L"bar\*(R" 加进去的 \f(CW$f\fR 变数应该是一个新的 \f(CW$f\fR (因为 \f(CW\*(C`my $f\*(C'\fR 在每个循环都应该创造一个新的区域变数)。然而，实际上并非如此。这个臭虫最新的 Perl 版本中已被修正 (在 5.004_05, 5.005_03 和 5.005_56 上测试过)。
.Sh "如何传递/返回一个{函数 Function, 文件句柄 FileHandle, 数组 Array,散列 Hash, 方法 Method, 正则表达式 Regex}?"
.IX Subsection "How can I pass/return a {Function, FileHandle, Array, Hash, Method, Regex}?"
除了正规表现式这个特例外，你需要以传参考值的方式传资料给这些物件。参看 perlsub 中的 \*(L"Pass by Reference\*(R"，里面有针对此问题的讨论，以及 perlref 里面有引用的资讯。
.PP
参见下面的 ``Passing Regexes''，学习如何传递正则表达式。
.IP "传递变量和函数" 4
.IX Item "Passing Variables and Functions"
一般的变数和函数是相当简单的：只要传一个指向现存的匿名变数或函数的参考值即可：
.Sp
.Vb 1
\&    func( \e$some_scalar );
.Ve
.Sp
.Vb 2
\&    func( \e@some_array  );
\&    func( [ 1 .. 10 ]   );
.Ve
.Sp
.Vb 2
\&    func( \e%some_hash   );
\&    func( { this => 10, that => 20 }   );
.Ve
.Sp
.Vb 2
\&    func( \e&some_func   );
\&    func( sub { $_[0] ** $_[1] }   );
.Ve
.IP "传递文件句柄" 4
.IX Item "Passing Filehandles"
在 Perl5.6 中，你可以用标量变量表示文件句柄，并将它与其他标量同样处理
.Sp
.Vb 2
\&        open my $fh, $filename or die "Cannot open $filename! $!";
\&        func( $fh );
.Ve
.Sp
.Vb 2
\&        sub func {
\&                my $passed_fh = shift;
.Ve
.Sp
.Vb 2
\&                my $line = <$fh>;
\&                }
.Ve
.Sp
在 Perl5.6 之前，必须用 \f(CW*FH\fR 或 \f(CW\*(C`\e*FH\*(C'\fR 语法。这叫做 \*(L"typeglobs\*(R"\-\-参见 perldata 中的 \*(L"Typeglobs and Filehandles\*(R" 和 perlsub 中的 \*(L"Pass by Reference\*(R"。
.IP "传递正则表达式" 4
.IX Item "Passing Regexes"
要传递正则表达式，你需要使用足够新的 Perl 发行，足以支持 \f(CW\*(C`qr//\*(C'\fR 构造方式的版本，传递字符串，使用一个捕获异常的 eval，或者其他更聪明的办法。
.Sp
这里有一个如何传递正则表达式字符串的例子，使用 \f(CW\*(C`qr//\*(C'\fR:
.Sp
.Vb 6
\&    sub compare($$) {
\&        my ($val1, $regex) = @_;
\&        my $retval = $val1 =~ /$regex/;
\&        return $retval;
\&    }
\&    $match = compare("old McDonald", qr/d.*D/i);
.Ve
.Sp
注意 \f(CW\*(C`qr//\*(C'\fR 如何允许在后面加上标志。这个模式在编译期被编译，尽管它后来才执行。 \f(CW\*(C`qr//\*(C'\fR
表示法虽然好用，但是直到 5.005 发行中才引入。在那之前，你必须用不直观的办法。例如，如果没有 \f(CW\*(C`qr//\*(C'\fR 的话:
.Sp
.Vb 6
\&    sub compare($$) {
\&        my ($val1, $regex) = @_;
\&        my $retval = eval { $val1 =~ /$regex/ };
\&        die if $@;
\&        return $retval;
\&    }
.Ve
.Sp
.Vb 1
\&    $match = compare("old McDonald", q/($?i)d.*D/);
.Ve
.Sp
确保你没有任何这样的东西：
.Sp
.Vb 1
\&    return eval "\e$val =~ /$regex/";   # WRONG
.Ve
.Sp
否则别人会靠双引号括起来的字串以及 eval 双重解译的本质而偷偷插入 shell指令来作坏事。例如：
.Sp
.Vb 1
\&    $pattern_of_evil = 'danger ${ system("rm -rf * &") } danger';
.Ve
.Sp
.Vb 1
\&    eval "\e$string =~ /$pattern_of_evil/";
.Ve
.Sp
想学非常非常聪明的方法的读者可以参考 O'Reilly 出的 Mastering Regular Expressions这本书，作者是 Jeffrey Friedl。其中第 273页的 Build_MatchMany_Function()特别的有趣。在 perlfaq2中可以找到有关本书 的资料。
.IP "传递方法" 4
.IX Item "Passing Methods"
要传递一个对象方法给一个函数，可以这样做：
.Sp
.Vb 7
\&    call_a_lot(10, $some_obj, "methname")
\&    sub call_a_lot {
\&        my ($count, $widget, $trick) = @_;
\&        for (my $i = 0; $i < $count; $i++) {
\&            $widget->$trick();
\&        }
\&    }
.Ve
.Sp
或者，使用一个闭包来包含这个对象，它的方法调用及参数：
.Sp
.Vb 6
\&    my $whatnot =  sub { $some_obj->obfuscate(@args) };
\&    func($whatnot);
\&    sub func {
\&        my $code = shift;
\&        &$code();
\&    }
.Ve
.Sp
也可以研究 UNIVERSAL 类别中的 can()方法 (附於标准 Perl 版本中)。
.Sh "How do I create a static variable?"
.IX Subsection "如何创建一个静态变量？"
就像与 Perl相关的其他事情一样，``条条大路通罗马'' (TMTOWTDI)。对其他语言来说叫做 ``静态变数'' (static variable)的东西，在 Perl里面可能是一个函数私有的变数(只有该函数自己看得到，且在不同的呼叫间保持定值)，或是一个档案私有(file-private)变数(只有同一个档案中的函数才看得到)。
.PP
以下就是实作函数私有变数的程式：
.PP
.Vb 5
\&    BEGIN {
\&        my $counter = 42;
\&        sub prev_counter { return --$counter }
\&        sub next_counter { return $counter++ }
\&    }
.Ve
.PP
prev_counter() 和 next_counter() 将会共用一个於编译时初始化的私有变数 $counter。
.PP
要声明一个档案私有(file-private)变数，你仍然得使用 my()，将它放在档案开头处最外围。假设现在是在 Pax.pm 这个档案里：
.PP
.Vb 2
\&    package Pax;
\&    my $started = scalar(localtime(time()));
.Ve
.PP
.Vb 1
\&    sub begun { return $started }
.Ve
.PP
当用 \f(CW\*(C`use Pax\*(C'\fR 或 \f(CW\*(C`require Pax\*(C'\fR 载入此模组时，这个变数就会被初始化。不过它不会被资源回收，像其他出了有效范围的变数那样，因为 begun()函数要用到它，但是没有其他函数能撷取它。这个变数不能以 \f(CW$Pax::started\fR 的形式来撷取，因为它所存在的范围与此包裹无关。它存在的范围是这个档案。可想见地，一个档案里可以放好几个包裹，而所有的包裹都撷取同一个私有变数，但从另一个档案中，即使是属於同一个包裹(package)，也不能取得它的值。
.PP
参见 perlsub 中的 \*(L"Persistent Private Variables\*(R" 的细节.
.Sh "What's the difference between dynamic and lexical (static) scoping?  Between \fIlocal()\fP and \fImy()\fP?"
.IX Subsection "动态和静态作用域有什么区别？local() 和 my() 呢?"
local($x) 将全域变数 $x的原值存起来，并在此函数执行期间赋予一个新 值，此值可以从此函数所呼叫的其他函数里看见。这整个步骤是在执行期间完成的，所以才叫做动态范围选取 (dynamic scoping)。local()影响的是全域变数，或者称作包裹变数或动态变数。
.PP
\&\f(CW\*(C`my($x)\*(C'\fR 会创造一个只能在目前这个函数里看得见的新变数。这个步骤是在编译期完成(compile-time)，所以称作文字式或是静态范围选取。my()总是作用在私有变数，也称作文字式变数或(不当地)称作静态(范围选取)变数。
.PP
例如：
.PP
.Vb 3
\&    sub visible {
\&        print "var has value $var\en";
\&    }
.Ve
.PP
.Vb 4
\&    sub dynamic {
\&        local $var = 'local';   # 为全局变量暂时赋值
\&        visible();              # 调用 $var 变量
\&    }
.Ve
.PP
.Vb 4
\&    sub lexical {
\&        my $var = 'private';    # 新的私有变量 $var
\&        visible();              # (在 sub 作用域之外不可见)
\&    }
.Ve
.PP
.Vb 1
\&    $var = 'global';
.Ve
.PP
.Vb 3
\&    visible();                  # prints global
\&    dynamic();                  # prints local
\&    lexical();                  # prints global
.Ve
.PP
你可以发现在整个过程中 ``private''这个值都印不出来。那是因为 $var的值只存在於lexical() 函数的区块里面，对它所呼叫的函数来说是看不到的。
.PP
总结来说，local()不会产生你想像中的私有、区域变数。它只是将一个暂时的值授予一个全域变数。如果你要的是私有的变数，那麽 my() 才是你要找的。
.PP
参见 perlsub 中的 \*(L"Private Variables via \fImy()\fR\*(R" 以及
\&\*(L"Temporary Values via \fIlocal()\fR\*(R" 来获取详情
.Sh "在存在同名内部变量的作用域中，如何存取一个动态变量？"
.IX Subsection "How can I access a dynamic variable while a similarly named lexical is in scope?"
如果你知道你所在的是哪一个包裹(package)的话，你可以直接指名，就像写 \f(CW$Some_Pack::var\fR 这样。注意 \f(CW$::var\fR 这个写法 并非表示目前此包裹 (package) 内的动态变数 $var，而是指在 main包裹(package) 里的那个，就等价於 \f(CW$main::var\fR 。
.PP
.Vb 3
\&        use vars '$var';
\&        local $var = "global";
\&        my    $var = "lexical";
.Ve
.PP
.Vb 2
\&        print "lexical is $var\en";
\&        print "global  is $main::var\en";
.Ve
.PP
可选的，可以使用编译器指令 \fIour()\fR 来在当前静态作用域中引入动态变量
.PP
.Vb 2
\&        require 5.006; # our() did not exist before 5.6
\&        use vars '$var';
.Ve
.PP
.Vb 2
\&        local $var = "global";
\&        my $var    = "lexical";
.Ve
.PP
.Vb 1
\&        print "lexical is $var\en";
.Ve
.PP
.Vb 4
\&        {
\&          our $var;
\&          print "global  is $var\en";
\&        }
.Ve
.Sh "深连接和浅连接有什么不同？"
.IX Subsection "What's the difference between deep and shallow binding?"
在深连结中，匿名函数中所用到的文字式变数值是以该函数产生时所在的范围为准。在浅连结中，这些变数值是以函数被呼叫时所在的范围为准，如果在这个范围中恰巧有同名的变数，便使用这些当地变数的值。Perl总是使用文字式变数(就是以 my()创造的)式的深连结。然而，动态变数(也称作全域(global)，区域(local)，或包裹(package)变数)在功效上是浅连结。就把这当作是少用它们的另一个理由好 了。请参考 "什么是闭包" 一节。
.ie n .Sh "为什么 "my($foo) = <FILE>;" 不工作？"
.el .Sh "为什么 ``my($foo) = <FILE>;''不工作？"
.IX Subsection "Why doesn't ""my($foo) = <FILE>;"" work right?"
local()会把 =号右边以序列情境来对待。而 <FH> 这个阅读的 动作，就像 Perl里许多的函数以及运算子一样，会自动分辨出自己被呼叫时所在的情境并且采取适当的作法。一般来说，scalar()函数可以帮点忙。这个函数实际上对资料本身不会有任何作用(与一般所认为的相反)，但是会告诉它所作用的函数要以对待纯量值的方法来运算。如果那个函数没有预先定义好碰到纯量情境的行为，那麽它当然也帮不了你(例如 sort() 函数)。
.PP
然而，在以上这个例子 (local...)中，只要省略括号便可强制使用标量情境：
.PP
.Vb 3
\&    local($foo) = <FILE>;           # WRONG
\&    local($foo) = scalar(<FILE>);   # ok
\&    local $foo  = <FILE>;           # right
.Ve
.PP
其实在这个例子中，或许你该改用文字式变数 (lexical variables)，不过会碰到 的问题跟上面一样：
.PP
.Vb 2
\&    my($foo) = <FILE>;  # WRONG
\&    my $foo  = <FILE>;  # right
.Ve
.Sh "如何重定义一个内建函数，操作符 或者方法？"
.IX Subsection "How do I redefine a builtin function, operator, or method?"
为什麽要这麽做？ :\-)
.PP
如果你要覆盖掉某个内建函数，例如说 open()，那你得将其定义从另一个模组载 入。参考 perlsub 中的 Overriding Builtin Functions。在 \*(L"Class::Template\*(R" 里面也有个范例。
.PP
如果你要覆盖掉一个 Perl运算子，像是 \f(CW\*(C`+\*(C'\fR 或 \f(CW\*(C`**\*(C'\fR, 那你该使用 \f(CW\*(C`use overload\*(C'\fR 这个编用，在 overload 中有记载。
.PP
如果你要覆盖父类别 (parent class)里的方法呼叫 (method calls)，请看 perltoot 中的 Overridden Methods 。
.Sh "调用函数时 &foo 和 foo() 的形式有什么不同?"
.IX Subsection "What's the difference between calling a function as &foo and foo()?"
当你用 &foo的方式呼叫一个函数时，你等於让这个函数撷取你目前 @_里面的值，同时也跳过原型定义 (prototypes)不用。这表式此函数抓到的是你当时的 @_， 而非一个空的 @_！虽然严格讲起来它也不能算是个 bug (但是在 perlsub里面是这麽说的)但在大部份情况下，这也算不上是个特别功能。
.PP
当你用 &foo()的方式呼叫你的函数时，你会得到一个新的 @_，但是原型定义 仍然会被避开不用。
.PP
在一般情况下，你该用 foo()的方式去呼叫函数。只有在编译器已事先知道这个函数的定义时，括号才能省略，譬如当这个函数所在的模组或包裹被 use (但如果是被 require则不行)时，或是透过先前提及或 use subs宣告等方法，让编译器先接触到这个函数的定义。用这种呼叫方式，即使是当括号省掉时，你都会得到一个乾净的 @_，不会有任何不该出现的旧值残留在上面。
.Sh "如何创建一个分支语句？"
.IX Subsection "How do I create a switch or case statement?"
这个问题在 perlsyn 文件里有更详尽的解释。简单来说，因为 Perl本身已提供了多种不同的条件测试方法可供使用 (数值比较、字串比较、 glob比较、正规表示式 对应、覆盖比较，及其它)，所以并没有正式的 case叙述语法。虽然自 perl1起这就一直是许多人期盼的一个项目，但因 Larry无法决定怎样才是呈现这功能的最好方法，因此还是将它略掉。
.PP
从 Perl 5.8 开始，要使用 swtich 和 case，可以使用 Switch 扩展，就是这样：
.PP
.Vb 1
\&        use Switch;
.Ve
.PP
此后就可以用 switch 和 case 了.  It is not as fast as it could be
because it's not really part of the language (it's done using source
filters) but it is available, and it's very flexible.
.PP
But if one wants to use pure Perl, the general answer is to write a
construct like this:
.PP
.Vb 6
\&    for ($variable_to_test) {
\&        if    (/pat1/)  { }     # do something
\&        elsif (/pat2/)  { }     # do something else
\&        elsif (/pat3/)  { }     # do something else
\&        else            { }     # default
\&    }
.Ve
.PP
下面这个简单的 switch范例以模式对应为基础。我们将要做的是对储存在 $whatchamacallit里面的参考值 (reference)的类型进行多重条件的判断。【译注：$whatchamacallit 函意为 $what_you_might_call_it】
.PP
.Vb 1
\&    SWITCH: for (ref $whatchamacallit) {
.Ve
.PP
.Vb 1
\&        /^$/            && die "not a reference";
.Ve
.PP
.Vb 4
\&        /SCALAR/        && do {
\&                                print_scalar($$ref);
\&                                last SWITCH;
\&                        };
.Ve
.PP
.Vb 4
\&        /ARRAY/         && do {
\&                                print_array(@$ref);
\&                                last SWITCH;
\&                        };
.Ve
.PP
.Vb 4
\&        /HASH/          && do {
\&                                print_hash(%$ref);
\&                                last SWITCH;
\&                        };
.Ve
.PP
.Vb 4
\&        /CODE/          && do {
\&                                warn "can't print function ref";
\&                                last SWITCH;
\&                        };
.Ve
.PP
.Vb 1
\&        # DEFAULT
.Ve
.PP
.Vb 1
\&        warn "User defined type skipped";
.Ve
.PP
.Vb 1
\&    }
.Ve
.PP
See \f(CW\*(C`perlsyn/"Basic BLOCKs and Switch Statements"\*(C'\fR for many other
examples in this style.
.PP
Sometimes you should change the positions of the constant and the variable.
For example, let's say you wanted to test which of many answers you were
given, but in a case-insensitive way that also allows abbreviations.
You can use the following technique if the strings all start with
different characters or if you want to arrange the matches so that
one takes precedence over another, as \f(CW"SEND"\fR has precedence over
\&\f(CW"STOP"\fR here:
.PP
.Vb 6
\&    chomp($answer = <>);
\&    if    ("SEND"  =~ /^\eQ$answer/i) { print "Action is send\en"  }
\&    elsif ("STOP"  =~ /^\eQ$answer/i) { print "Action is stop\en"  }
\&    elsif ("ABORT" =~ /^\eQ$answer/i) { print "Action is abort\en" }
\&    elsif ("LIST"  =~ /^\eQ$answer/i) { print "Action is list\en"  }
\&    elsif ("EDIT"  =~ /^\eQ$answer/i) { print "Action is edit\en"  }
.Ve
.PP
A totally different approach is to create a hash of function references.
.PP
.Vb 6
\&    my %commands = (
\&        "happy" => \e&joy,
\&        "sad",  => \e&sullen,
\&        "done"  => sub { die "See ya!" },
\&        "mad"   => \e&angry,
\&    );
.Ve
.PP
.Vb 7
\&    print "How are you? ";
\&    chomp($string = <STDIN>);
\&    if ($commands{$string}) {
\&        $commands{$string}->();
\&    } else {
\&        print "No such command: $string\en";
\&    }
.Ve
.Sh "如何捕获对未定义变量，函数或方法的访问？"
.IX Subsection "How can I catch accesses to undefined variables, functions, or methods?"
在 perlsub 中的 \*(L"Autoloading\*(R" 和 perltoot 中的 \*(L"\s-1AUTOLOAD:\s0 Proxy Methods\*(R" 里 提到的 AUTOLOAD 方法让你能捕捉对於未定义函数与方法的呼叫。
.PP
When it comes to undefined variables that would trigger a warning
under \f(CW\*(C`use warnings\*(C'\fR, you can promote the warning to an error.
.PP
.Vb 1
\&        use warnings FATAL => qw(uninitialized);
.Ve
.Sh "为什么找不到包含在同一个文件中的方法？"
.IX Subsection "Why can't a method included in this same file be found?"
一些可能的原因：你用的继承给搞混了、你拼错了该方法的名字，或是物件的类别错误。这些事在 perltoot里都有更详尽的说明。同时你也可以用 \f(CW\*(C`print ref($object)\*(C'\fR 来找出 \f(CW$object\fR 这个物件是被归到哪个类别底下。
.PP
另一个可能的原因是你在 Perl还不知道这个包裹 (package)存在之前便将某个类别名称在间接式物件语法中使用 (例如 \f(CW\*(C`find Guru "Samy"\*(C'\fR)。最好是在开始使用你的包裹前，先确定都已经先把它们定义好了，如果你用的是 use 而非 require的话，这件事便会自动处理好。不然的话，确定你使用箭头式语法 (例如，\f(CW\*(C`Guru\->find("Samy")\*(C'\fR))。在perlobj 里面对於物件的记号有详尽解释。
.PP
Make sure to read about creating modules in perlmod and
the perils of indirect objects in \*(L"Method Invocation\*(R" in perlobj.
.Sh "如何找到当前的包？"
.IX Subsection "How can I find out my current package?"
如果只是一个随意的程式的话，你可以用下面的方法找出目前正被编译的包裹为何：
.PP
.Vb 1
\&    my $packname = __PACKAGE__;
.Ve
.PP
但如果是一个方法的话，而且印出的错误讯息中要包含呼叫此方法的物件 (不见得就是把这个方法编译进去的那个物件)则：
.PP
.Vb 5
\&    sub amethod {
\&        my $self  = shift;
\&        my $class = ref($self) || $self;
\&        warn "called me from a $class object";
\&    }
.Ve
.Sh "如何注释掉大块的 perl 代码？"
.IX Subsection "How can I comment out a large block of perl code?"
用内嵌 POD格式的方法把程式码变注解。将要注释掉的块包含在 \s-1POD\s0 标记内, 例如 \f(CW\*(C`=for nobody\*(C'\fR 和 \f(CW\*(C`=cut\*(C'\fR
(标志着 \s-1POD\s0 块的结束).
.PP
.Vb 1
\&    # 这是程式
.Ve
.PP
.Vb 1
\&    =for nobody
.Ve
.PP
.Vb 1
\&    all of this stuff
.Ve
.PP
.Vb 2
\&    接下来此处所有的文字都会被忽略
.Ve
.PP
.Vb 1
\&    =cut
.Ve
.PP
.Vb 1
\&    # program continues
.Ve
.PP
The pod directives cannot go just anywhere.  You must put a
pod directive where the parser is expecting a new statement,
not just in the middle of an expression or some other
arbitrary grammar production.
.PP
See perlpod for more details.
.Sh "How do I clear a package?"
.IX Subsection "How do I clear a package?"
Use this code, provided by Mark-Jason Dominus:
.PP
.Vb 17
\&    sub scrub_package {
\&        no strict 'refs';
\&        my $pack = shift;
\&        die "Shouldn't delete main package"
\&            if $pack eq "" || $pack eq "main";
\&        my $stash = *{$pack . '::'}{HASH};
\&        my $name;
\&        foreach $name (keys %$stash) {
\&            my $fullname = $pack . '::' . $name;
\&            # Get rid of everything with that name.
\&            undef $$fullname;
\&            undef @$fullname;
\&            undef %$fullname;
\&            undef &$fullname;
\&            undef *$fullname;
\&        }
\&    }
.Ve
.PP
Or, if you're using a recent release of Perl, you can
just use the \fISymbol::delete_package()\fR function instead.
.Sh "How can I use a variable as a variable name?"
.IX Subsection "How can I use a variable as a variable name?"
Beginners often think they want to have a variable contain the name
of a variable.
.PP
.Vb 3
\&    $fred    = 23;
\&    $varname = "fred";
\&    ++$$varname;         # $fred now 24
.Ve
.PP
This works \fIsometimes\fR, but it is a very bad idea for two reasons.
.PP
The first reason is that this technique \fIonly works on global
variables\fR.  That means that if \f(CW$fred\fR is a lexical variable created
with \fImy()\fR in the above example, the code wouldn't work at all: you'd
accidentally access the global and skip right over the private lexical
altogether.  Global variables are bad because they can easily collide
accidentally and in general make for non-scalable and confusing code.
.PP
Symbolic references are forbidden under the \f(CW\*(C`use strict\*(C'\fR pragma.
They are not true references and consequently are not reference counted
or garbage collected.
.PP
The other reason why using a variable to hold the name of another
variable is a bad idea is that the question often stems from a lack of
understanding of Perl data structures, particularly hashes.  By using
symbolic references, you are just using the package's symbol-table hash
(like \f(CW%main::\fR) instead of a user-defined hash.  The solution is to
use your own hash or a real reference instead.
.PP
.Vb 3
\&    $USER_VARS{"fred"} = 23;
\&    $varname = "fred";
\&    $USER_VARS{$varname}++;  # not $$varname++
.Ve
.PP
There we're using the \f(CW%USER_VARS\fR hash instead of symbolic references.
Sometimes this comes up in reading strings from the user with variable
references and wanting to expand them to the values of your perl
program's variables.  This is also a bad idea because it conflates the
program-addressable namespace and the user-addressable one.  Instead of
reading a string and expanding it to the actual contents of your program's
own variables:
.PP
.Vb 2
\&    $str = 'this has a $fred and $barney in it';
\&    $str =~ s/(\e$\ew+)/$1/eeg;             # need double eval
.Ve
.PP
it would be better to keep a hash around like \f(CW%USER_VARS\fR and have
variable references actually refer to entries in that hash:
.PP
.Vb 1
\&    $str =~ s/\e$(\ew+)/$USER_VARS{$1}/g;   # no /e here at all
.Ve
.PP
That's faster, cleaner, and safer than the previous approach.  Of course,
you don't need to use a dollar sign.  You could use your own scheme to
make it less confusing, like bracketed percent symbols, etc.
.PP
.Vb 2
\&    $str = 'this has a %fred% and %barney% in it';
\&    $str =~ s/%(\ew+)%/$USER_VARS{$1}/g;   # no /e here at all
.Ve
.PP
Another reason that folks sometimes think they want a variable to
contain the name of a variable is because they don't know how to build
proper data structures using hashes.  For example, let's say they
wanted two hashes in their program: \f(CW%fred\fR and \f(CW%barney\fR, and that they
wanted to use another scalar variable to refer to those by name.
.PP
.Vb 2
\&    $name = "fred";
\&    $$name{WIFE} = "wilma";     # set %fred
.Ve
.PP
.Vb 2
\&    $name = "barney";
\&    $$name{WIFE} = "betty";     # set %barney
.Ve
.PP
This is still a symbolic reference, and is still saddled with the
problems enumerated above.  It would be far better to write:
.PP
.Vb 2
\&    $folks{"fred"}{WIFE}   = "wilma";
\&    $folks{"barney"}{WIFE} = "betty";
.Ve
.PP
And just use a multilevel hash to start with.
.PP
The only times that you absolutely \fImust\fR use symbolic references are
when you really must refer to the symbol table.  This may be because it's
something that can't take a real reference to, such as a format name.
Doing so may also be important for method calls, since these always go
through the symbol table for resolution.
.PP
In those cases, you would turn off \f(CW\*(C`strict 'refs'\*(C'\fR temporarily so you
can play around with the symbol table.  For example:
.PP
.Vb 5
\&    @colors = qw(red blue green yellow orange purple violet);
\&    for my $name (@colors) {
\&        no strict 'refs';  # renege for the block
\&        *$name = sub { "<FONT COLOR='$name'>@_</FONT>" };
\&    }
.Ve
.PP
All those functions (\fIred()\fR, \fIblue()\fR, \fIgreen()\fR, etc.) appear to be separate,
but the real code in the closure actually was compiled only once.
.PP
So, sometimes you might want to use symbolic references to directly
manipulate the symbol table.  This doesn't matter for formats, handles, and
subroutines, because they are always global\*(--you can't use \fImy()\fR on them.
For scalars, arrays, and hashes, though\*(--and usually for subroutines\*(--
you probably only want to use hard references.
.ie n .Sh "What does ""bad interpreter"" mean?"
.el .Sh "What does ``bad interpreter'' mean?"
.IX Subsection "What does bad interpreter mean?"
The \*(L"bad interpreter\*(R" message comes from the shell, not perl.  The
actual message may vary depending on your platform, shell, and locale
settings.
.PP
If you see \*(L"bad interpreter \- no such file or directory\*(R", the first
line in your perl script (the \*(L"shebang\*(R" line) does not contain the
right path to perl (or any other program capable of running scripts). 
Sometimes this happens when you move the script from one machine to
another and each machine has a different path to perl\-\-\-/usr/bin/perl
versus /usr/local/bin/perl for instance.
.PP
If you see \*(L"bad interpreter: Permission denied\*(R", you need to make your
script executable.
.PP
In either case, you should still be able to run the scripts with perl
explicitly:
.PP
.Vb 1
\&        % perl script.pl
.Ve
.PP
If you get a message like \*(L"perl: command not found\*(R", perl is not in
your \s-1PATH\s0, which might also mean that the location of perl is not
where you expect it so you need to adjust your shebang line.
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Copyright (c) 1997\-2002 Tom Christiansen and Nathan Torkington.
All rights reserved.
.PP
This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
Irrespective of its distribution, all code examples in this file
are hereby placed into the public domain.  You are permitted and
encouraged to use this code in your own programs for fun
or for profit as you see fit.  A simple comment in the code giving
credit would be courteous but is not required.
.SH "译者"
.B 陈彦铭，萧百龄，两只老虎工作室
