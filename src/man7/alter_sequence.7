. mso zh.tmac
.\" auto-generated by docbook2man-spec $Revision: 1.1 $
.TH "ALTER SEQUENCE" "7" "2003-11-02" "SQL - Language Statements" "SQL Commands"
.SH NAME
ALTER SEQUENCE \- 更改一个序列生成器的定义

.SH SYNOPSIS
.sp
.nf
ALTER SEQUENCE \fIname\fR [ INCREMENT [ BY ] \fIincrement\fR ]
    [ MINVALUE \fIminvalue\fR | NO MINVALUE ] [ MAXVALUE \fImaxvalue\fR | NO MAXVALUE ]
    [ RESTART [ WITH ] \fIstart\fR ] [ CACHE \fIcache\fR ] [ [ NO ] CYCLE ]
  
.sp
.fi
.SH "DESCRIPTION 描述"
.PP
\fBALTER SEQUENCE\fR 命令修改一个现有的序列发生器的参数。 任何没有明确在 ALTER SEQUENCE 命令里声明的参数都将保留原先的设置。
.SH "PARAMETERS 参数"
.PP
.TP
\fB\fIname\fB\fR
 一个要修改的序列的名字（可以有模式修饰）。
.TP
\fB\fIincrement\fB\fR
INCREMENT BY \fIincrement\fR 子句是可选的。一个正数会让序列成为递增序列，负数则成为递减序列。 如果没有声明，将沿用原来的递增值。
.TP
\fB\fIminvalue\fB\fR
.TP
\fBNO MINVALUE\fR
 可选的子句 MINVALUE \fIminvalue\fR  决定一个序列可以生成的最小的值。如果声明了 NO MINVALUE，将使用缺省值， 对于递增和递减的序列分别是 1 和 -2^63-1。如果没有声明任何选项，则沿用当前的最小值。
.TP
\fB\fImaxvalue\fB\fR
.TP
\fBNO MAXVALUE\fR
 可选的子句 MAXVALUE \fImaxvalue\fR 决定序列的最大值。如果声明了 NO MAXVALUE，则使用缺省值，对于递增和递减的序列分别是 2^63-1 和 -1。如果两个选项都没有声明， 则沿用当前的最大值。
.TP
\fB\fIstart\fB\fR
 可选的 RESTART WITH \fIstart\fR 子句允许序列可以在任何地方开始。
.TP
\fB\fIcache\fB\fR
CACHE \fIcache\fR 选项打开序列号预分配并存储在内存缓冲的功能。最小值是 1 （也就是每次只能生成一个数值，没有缓冲）。 如果没有声明，将沿用旧的缓冲值。
.TP
\fBCYCLE\fR
 可选的键字 CYCLE 可以用于允许序列在达到递增序列的 maxvalue 或者递减序列的 minvalue的时候重叠使用。 如果达到了极限，那么生成的下一个数字将分别是
\fIminvalue\fR 或
\fImaxvalue\fR。
.TP
\fBNO CYCLE\fR
 如果声明了可选键字 NO CYCLE，任何在序列达到其最大极限后对 nextval 的调用都将返回错误。 如果既未声明 CYCLE 也未声明 NO CYCLE， 那么将沿用原有的循环行为。
.PP
.SH "EXAMPLES 例子"
.PP
 从 105 开始重新开始一个叫 serial 的序列：
.sp
.nf
ALTER SEQUENCE serial RESTART WITH 105;
.sp
.fi
.SH "NOTES 注意"
.PP
 为了避免并发的事务从同一个序列获取数值的时候被阻塞住，ALTER SEQUENCE 操作从来不会回滚； 修改马上生效并且不能恢复。
.PP
\fBALTER SEQUENCE\fR 将不会立即影响后端的 nextval 结果，除了当前的之外， 因为它又已经缓冲了的序列号。它们只有再使用光所有已经缓冲的数值之后才能意识到改变了的序列参数。当前后端将立即被影响。
.SH "COMPATIBILITY  兼容性"
.SS "SQL99"
.PP
\fBALTER SEQUENCE\fR 是 PostgreSQL  语言扩展。在 SQL99 里没有 ALTER SEQUENCE 语句。
.SH "译者"
.B Postgresql 中文网站
.B 何伟平 <laser@pgsqldb.org>
