. mso zh.tmac
.\" auto-generated by docbook2man-spec $Revision: 1.1 $
.TH "CREATE OPERATOR" "7" "2003-11-02" "SQL - Language Statements" "SQL Commands"
.SH NAME
CREATE OPERATOR \- 定义一个新的操作符

.SH SYNOPSIS
.sp
.nf
CREATE OPERATOR \fIname\fR (
    PROCEDURE = \fIfuncname\fR
    [, LEFTARG = \fIlefttype\fR ] [, RIGHTARG = \fIrighttype\fR ]
    [, COMMUTATOR = \fIcom_op\fR ] [, NEGATOR = \fIneg_op\fR ]
    [, RESTRICT = \fIres_proc\fR ] [, JOIN = \fIjoin_proc\fR ]
    [, HASHES ] [, MERGES ]
    [, SORT1 = \fIleft_sort_op\fR ] [, SORT2 = \fIright_sort_op\fR ]
    [, LTCMP = \fIless_than_op\fR ] [, GTCMP = \fIgreater_than_op\fR ]
)
.sp
.fi
.SH "DESCRIPTION 描述"
.PP
\fBCREATE OPERATOR\fR 定义一个新的操作符， name。 定义该操作符的用户成为其所有者。如果给出了一个模式名，那么该操作符将在指定的模式中创建。 否则它会在当前模式中创建。
.PP
 操作符 name  是一个最多NAMEDATALEN-1 长的（缺省为 63 个）下列字符组成的字串：
.sp
.nf
+ - * / < > = ~ ! @ # % ^ & | ` ?
.sp
.fi
 你选择名字的时候有几个限制：
.TP 0.2i
\(bu
-- 和 /* 不能在操作符名字的任何地方出现， 因为它们会被认为是一个注释的开始。
.TP 0.2i
\(bu
 一个多字符的操作符名字不能以 + 或 - 结尾， 除非该名字还包含至少下面字符之一：
.sp
.nf
~ ! @ # % ^ & | ` ?
.sp
.fi
 例如， @- 是一个允许的操作符名， 但 *- 不是。 这个限制允许 PostgreSQL  分析 SQL-有问题的查询而不要求在符号之间有空白。
.PP
.PP
 操作符 != 在输入时映射成 <>， 因此这两个名称总是相等的。
.PP
 至少需要定义一个LEFTARG或RIGHTARG。 对于双目操作符来说，两者都需要定义。 对右目操作符来说，只需要定义LEFTARG， 而对于左目操作符来说，只需要定义RIGHTARG。
.PP
 同样，funcname 过程必须已经用 CREATE FUNCTION 定义过， 而且必须定义为接受正确数量的指定类型参数（一个或是两个）。
.PP
 其它子句声明可选的操作符优化子句。他们的含义在 ``User-Defined Operators'' 里定义。
.SH "PARAMETERS 参数"
.TP
\fB\fIname\fB\fR
 要定义的操作符名字。可用的字符见上文。 其名字可以用模式修饰，比如 CREATE OPERATOR myschema.+ (...)。 如果没有模式，则在当前模式中创建操作符。同一个模式中的两个操作符可以有一样的名字，只要他们操作不同的数据类型。这叫做 重载。
.TP
\fB\fIfuncname\fB\fR
 用于实现该操作符的函数。
.TP
\fB\fIlefttype\fB\fR
 如果存在的话，操作符左手边的参数类型。 如果是左目操作符，这个参数可以省略。
.TP
\fB\fIrighttype\fB\fR
 如果存在的话，操作符右手边的参数类型。 如果是右目操作符，这个参数可以省略。
.TP
\fB\fIcom_op\fB\fR
 该操作符对应的交换（commutator）操作符。
.TP
\fB\fIneg_op\fB\fR
 对应的负操作符。
.TP
\fB\fIres_proc\fB\fR
 此操作符约束选择性计算函数。
.TP
\fB\fIjoin_proc\fB\fR
 此操作符连接选择性计算函数。
.TP
\fBHASHES\fR
 表明此操作符支持哈希（散列）连接。
.TP
\fBMERGES\fR
 表明此操作符可以支持一个融合连接。
.TP
\fB\fIleft_sort_op\fB\fR
 如果此操作符支持融合连接（join），此操作符的左手边数据的排序操作符。
.TP
\fB\fIright_sort_op\fB\fR
 如果此操作符支持融合连接（join），此操作符的右手边数据的排序操作符。
.TP
\fB\fIless_than_op\fB\fR
 如果这个操作符可以支持融合连接，那么这就是比较这个操作符的输入数据类型的小于操作符。
.TP
\fB\fIgreater_than_op\fB\fR
 如果这个操作符不支持融合连接，那么这就是比较输入这个操作符的数据类型的大于操作符。
.PP
 要在 com_op 或者其它可选参数里给出一个模式修饰的操作符名，使用 OPERATOR()  语法，比如
.sp
.nf
COMMUTATOR = OPERATOR(myschema.===) ,
.sp
.fi
.PP
.SH "NOTES 注意"
.PP
 请参阅 ``User-Defined Operators'' 中操作符章节获取更多信息。
.PP
 请使用 DROP OPERATOR 从数据库中删除用户定义操作符。
.SH "EXAMPLES 例子"
.PP
 下面命令定义一个新操作符，面积相等，用于 box 数据类型。
.sp
.nf
CREATE OPERATOR === (
    LEFTARG = box,
    RIGHTARG = box,
    PROCEDURE = area_equal_procedure,
    COMMUTATOR = ===,
    NEGATOR = !==,
    RESTRICT = area_restriction_procedure,
    JOIN = area_join_procedure,
    HASHES,
    SORT1 = <<<,
    SORT2 = <<<
    -- 因为给出了排序操作符，索引隐含地有 MERGES。
    -- LTCMP 和 GTCMP 分别假设是 < 和 >
);
.sp
.fi
.SH "COMPATIBILITY 兼容性"
.PP
\fBCREATE OPERATOR\fR 是 PostgreSQL 扩展。 在SQL标准中没有 CREATE OPERATOR  语句。
.SH "译者"
.B Postgresql 中文网站
.B 何伟平 <laser@pgsqldb.org>
