. mso zh.tmac
.\" Copyright (c) 1995,1997 Paul Gortmaker and Andries Brouwer
.\" 中文版 Copyright (c) 2000 Bill Pan, Laser 和 www.linuxforum.net
.\"
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" This man page written 950814 by aeb, based on Paul Gortmaker's HOWTO
.\" (dated v1.0.1, 15/08/95).
.\" Major update, aeb, 970114.
.TH BOOTPARAM 7 "14 January 1995" "Linux 2.1.21" "Linux Programmer's Manual"
.SH NAME
bootparam \- 介绍Linux核心的启动参数
.SH 描叙
Linux 核心在启动的时候可以接受指定的"命令行参数"或"启动参数"．
在通常情况下，由于核心有可能无法识别某些硬件，
或可能将某些硬件识别为不正确的配置，因此，
这些参数可以被用来提供正确的硬件配置参数。
当Linux核心被BIOS直接启动的时候
（比如说你的核心是从使用了 "cp zImage /dev/fd0" 命令制造的 Linux 启动软盘来启动的），
你无法指定任何的启动参数。
因此，为了能够指定启动参数，你必须使用某些能够传递启动参数的软件，
例如 LILO 或 Loadlin。
为了使用很少的参数来改变的核心配置，
可以使用 rdev，查看
.BR rdev（8）
可以得到更多的细节。

由 Werner Almesberger 开发的 LILO 程序 (LInux LOader) 是最普遍的启动配置软件。
它能够启动各种不同的系统核心，
这些启动配置信息被放置在一个简单明了的文本文件中
（请看
.BR lilo（8）
和
.BR lilo.conf(5).）

LILO 可以启动象 DOS，OS/2，Linux，FreeBSD，UnixWare 这样的操作系统，
而且灵活性也非常强。

另外一个较为普遍的启动软件是"LoadLin"。这是一个基于 DOS 操作系统的软件。
该软件能够从DOS提示符下启动Linux核心（使用启动参数），
只要某些必需的资源可用就行。
这对于那些希望从 DOS 系统中启动 Linux 的人来说是很不错的方法。

如果你的硬件能够被 DOS 驱动程序启用的话，LoadLin也会是非常有用的。
一个最常见的例子是设置与 SoundBlaster 兼容的声卡。
这些声卡通过使用 DOS 驱动程序设定一些寄存器就可以将它们设置成为 SB 兼容模式的声卡。
在DOS下启动这些声卡的启动程序，然后使用LoadLin程序启动Linux，
这样就可以避免由于重新启动Linux系统而造成声卡被重新设置。

.SH "参数列表"

核心参数行被解析成为一个由空格分隔的字符串列表（即启动参数表）。
大部分的启动参数的格式就象下面这样
.IP
名字[=值1]，[值2]……[，值10]
.LP
其中"名字"是一个唯一关键字，被用来区分接受值（如果有的话）那一部分核心。
要注意的是 10 个值的限制是确实存在的，
目前的程序代码只能对每个关键字处理 10 个逗号分隔的参数
（当然，在一些复杂的应用中，
你可以通过重新使用同样的关键字来传递多于10个的参数，
只要配置程序可以支持该方法）

大部分的排序工作是在 linux/init/main.c 中进行的。
首先，核心检查参数是否为 "root="、"nfsroot="、"nfsaddrs="、"ro"、"rw"、"debug"
和"init"这些特殊参数中的一种。这些参数的意义我们将在下面说明。

然后，核心会搜索"配置程序队列"（bootsetups队列）
来查看指定的参数字符串（比如"foo"）是不是与某个配置指定设备
或是核心的配置程序建立了关联。
例如假设你传递给核心 foo=3,4,5,6，
那么核心会搜索 bootsetups 队列看看"foo"是否已经注册。
如果是，那么核心将运行与"foo"关联的配置程序（比如foo_setup()）
并且将参数3，4，5，6交给核心命令列。

任何象 "foo=bar" 这样格式的参数不会被上面所说的那样，
作为一个配置程序的关联被接受，而是被解释成为一个环境变量的设置。
一个（无用的？）例子就是使用 "TERM=vt100" 作为核心的启动参数。

任何既不被核心接受又不被解释为环境变量的参数会被传送给第一个系统进程，
通常这会是init程序。最常用的传递给 init 进程的参数是 "single"，
它告诉init使用单用户模式启动计算机，并且不要执行任何的守护进程。
查阅帮助，看看你所装版本的 init 程序可以支持的参数。

.SH "一般的、与设备无关的启动参数"

.SS "`init=...'"

这个启动参数提供核心执行时的初始化命令。如果它没有被设置，
或者没有被找到的话，核心会去尝试调用
.IR /etc/init ,
然后是
.IR /bin/init ,
然后是
.IR /sbin/init ,
最后是
.IR /bin/sh
，如果都失败了，就会提示一个异常信息。
.SS "`nfsaddrs=...'"

该启动参数设置 nfs（网络文件系统）启动地址为指定的字符串值。
该启动地址被用于网络启动中。

.SS "`nfsroot=...'"

该动参数设置 nfs（网络文件系统）根目录名为指定字符串。
如果该字符串不是以'/'、','或者一个数字开始的，则该字符串加上"/tftpboot/"的前缀。

.SS  "`no387'"

(只有当CONFIG_BUGi386被定义后才有效)
某些 i387 协处理器在使用 32 位保护模式时会出现错误。
例如，一些早期的ULSI-387芯片在处理浮点运算时会出现死锁的情况。
使用"no387"启动参数可以让Linux忽略你的算术协处理器的存在。
当然，这时你就必须将你的核心编译成为支持数学仿真模式。

.SS "`no-hlt'"

(只有当CONFIG_BUGi386被定义后才有效)
某些早期的 i486DX-100 的处理器芯片在使用 "halt" 时会出现问题，
使用这个指令后它不会正常的返回到操作模式。
使用 "no-halt" 指令告诉 Linux 在没有事情可做的时候，
只是执行一个无限的循环指令，而不是让CPU进入"halt"模式。
这样就可以令人们使用这些有缺陷的芯片来运行 Linux。

.SS "`root=...'"

这个参数告诉核心在启动的时候使用哪个设备被作为根文件系统。
其缺省值是你在编译核心的时候就所确定的根设备。
如果你想要修改该值，比如说，将第二个软盘驱动器作为根设备，
你可以使用 "root=/dev/fd1" （根设备也可以用
.BR	rdev(8)）；
来设置。

根设备能够以符号形式或数字形式来指定。一种符号指定形式是 /dev/XXYN，
其中 XX 代表设备类型（ "hd" 代表普通 IDE 硬盘，紧跟其后的 Y 的范围是 "a" 到 "d"；
"SD" 代表 SCSI 硬盘，紧跟其后的 Y 的范围是 "a" 到 "e"；"ad" 代表 Atari ACSI磁盘，
紧跟其后的 Y 的范围是 "a" 到 "e"；"ez" 代表 Syquest EZ135 兼容的使用并口的可移动硬盘，
紧跟其后的 Y 的值只能是"a"；"xd" 代表 XT 兼容的磁盘，紧跟其后的 Y 的值是 "a"
或者是 "b"；"fd" 代表软驱，而 Y 代表软驱的序号 - fd0 代表 DOS 的 "A："，
fd1代表DOS的 "B："），Y 表示驱动器字母或序号。N 代表驱动器的分区号
（以十进制数值表示，当然，软驱是没有该信息的）。
目前的核心可以使用更多的驱动设备，
比如 nfs，ram，scd，mcd，cdu535，aztcd，cm206cd，gscd，sbpcd，sonycd，bpcd，
其中大部分都是 CD-ROM 设备。
（nfs 指示网络启动的位置；ram 表示一个 ram 虚拟磁盘（ram 表示可读写储存器）。

需要注意的是以上这些指定对你文件系统上的设备名称并没有做任何实质改变，
"/dev/" 部分的描述只是出于传统习惯。

你也可以通过使用数字形式的主/次设备号指定根设备，
但这是很笨拙和不方便的方法。
（例如，/dev/sda3 的主设备号是 8，次设备号是 3，
所以你也可以使用 "root=0x0803" 来指定根设备。）

.SS "`ro'和`rw'"

"ro" 选项告诉核心使用"只读"方式装配文件系统。
这样可以让"文件一致性检查"程序
（fsck程序，用来检查磁盘的工具，类似 DOS 的 scandisk 程序）
能够在一种所谓"静止"
（也就是说没有任何对文件系统的写操作）的文件系统中执行。
需要进行写操作的进程必须等到该文件系统使用
"读/写"方式重新装配以后才能进行，
例如，使用了"mount -w -n -o remount /"命令。
（请查看
.BR mount(8)。)

"rw" 选项告诉核心使用"可读写"方式装配文件系统。这是缺省值。

只读方式和可读写方式的选择可以使用
.BR rdev (8).
来设定。

.SS "`reserve=...'"

该参数用来设定保留区域，使得该区域的 I/O 端口不会被检测。该命令的格式是
.IP
.BI reserve= iobase,extent[,iobase,extent]...
.LP
在某些情况下你的机器也许必须避免设备驱动程序检测
（自动检测）某些指定区域的设备。
这些情况有可能是因为由于检测会导致硬件错误，或者硬件会被错误地识别，
又或者你只是不想核心对该硬件进行初始化。

reserve(保留)启动参数指定一个不要检测的 I/O 端口保留区。
设备驱动程序不会检测保留区域的 I/O 端口，
除非其他的启动参数明确的指定需要去检测。

例如，命令行
.IP
reserve=0x300,32  blah=0x300
.LP
表示设置保留 I/O 区域 0x300 到 0x31f（共32个端口）
不会被 `blah' 程序以外的驱动程序所检测。

.SS "`mem=...'"

PC 规范定义的返回内存数的 BIOS 调用最大可以返回 64MB 内存。
Linux 使用这个 BIOS 调用检测机器安装了多少内存。
如果你拥有超过 64MB 的内存，就可以使用这个参数告诉 Linux 你的内存数。
该值可以是 10 进制的或者是 16 进制的（加上 0x 的前缀），
后缀也可以加上 "k" （乘以 1024）或 "M" （乘以 1048576）。
下面是 Linux 初始人 Linus 对 "mem=" 参数使用的声明：
\&"核心能够接受任何你给予的 'mem=xx' 参数，
但是如果你欺骗它的话，它迟早会让你死的很难看。
参数用来指定最高位的 RAM 地址，所以 'mem=0x1000000' 表示你拥\&有 16MB 的内存。
而对于96MB内存的机器来说你应该设置为 'mem=0x6000000'。

注意注意注意：有些机器可能会将内存高端设置为 BIOS 所使用，
所以你可能将不能全部拥有 96MB 地址空间。
反之，有些芯片可以将包括 BIOS 的物理内存影射到内存高端去，
所以，你可以用的实际空间可能会是 96MB+384kB。
但是如果你告诉 Linux 核心你拥有的内存超出你的实际内存的话，将会发生很糟糕的事情。
也许躲得过初一，躲不过十五。"

.SS "`panic=N'"
在缺省情况下，核心并不会在异常后重新启动系统，
但是这个参数可以指定内核在发生异常后 N 秒后重新启动（如果 N>0）。
这个异常时限也可以使用 "echo N>/proc/sys/kernel/panic" 来设定。

.SS "`reboot=[warm|cold][,[bios|hard]]'"
（只有当 CONFIG_BUGi386 被定义的时候该参数才起作用）
从 2.0.22 版本后的核心开始，reboot 命令在缺省情况下使用冷启动。
你可以使用 "reboot=warm" 来进行老版本所的缺省的热启动方式。
（冷启动意味着对所有的硬件设备进行重新设置，
但是也有可能令在磁盘缓冲区中尚未写到磁盘上的数据被破坏。
热启动的优点是速度比较快。）
在缺省情况下，
要求键盘控制器向机器发出可以重新启动的低电位脉冲是很困难的，
但是至少有一种类型的主板不会这样工作。
选项 "reboot=bios" 将用 BIOS 的设置代替跳线。

.SS "`nosmp'" 和 "`maxcpus=N'"
（该参数只有当 __SMP__ 参数被定义的时候才有效）
命令行选项 "nosmp" 或 "maxcpus=0" 将会禁止激活 SMP（对称多处理）功能，
选项 "maxcpus=N" 限制在 SMP 方式下工作的 CPU 最大数目为 N．

.SH "核心开发者所使用的启动参数"

.SS "`debug'"

核心信息被传递给核心的日志守护进程 klogd 使得它们能够被记录在磁盘中。优先级高于
.I console_loglevel
的信息也可以在控制台上被显示出来。
（如果想了解信息优先级，可以去查看<linux/kernel.h>文件。）
在缺省情况下，所有比调试信息级别高的信息都会被写入日志文件。
但是这个启动参数的设置，可以使得核心将 DEBUG（调试信息）级别的信息写到日志里。
console loglevel 也能够在系统运行时通过使用 klogd 来设置。
请看
.BR klogd (8).

.SS "`profile=N'"

用来激活一个核心记录程序。
如果你需要了解核心在什么地方消耗其CPU周期，可以通过设置
.I prof_shift
为一个非零值来激活核心记录程序。
可以通过在编译内核的时候指定 CONFIG_PROFILE 值也可以通过 "profile=" 选项来指定
.I prof_shift
的值。
当
.I prof_shift
通过以上方式指定为 N，或通过 CONFIG_PROFILE_SHIT 的方式指定，
或者直接使用其缺省值 2 的时候，
这个值表示记录程序使用 prof_shift 个时间间隔进行记录：
每个时间间隔是一个时钟滴答。
当系统执行核心代码的时候，一个记数器的值会不断的增加。
.IP
profile[address >> prof_shift]++;
.LP
原始的配置文件可以从
.IR /proc/profile .
中读到。或者你也可以使用象 readprofile.c 之类的工具来阅读配置文件。任何写到
.I /proc/profile
中的操作将清除记数器。

.SS "`swap=N1,N2,N3,N4,N5,N6,N7,N8'"
设置控制核心的虚拟存储交换算法的 8 个参数。这8个参数是
max_page_age, page_advance, page_decline, page_initial_age, 
age_cluster_fract, age_cluster_min, pageout_weight, bufferout_weight。
只能用于核心控制。

.SS "`buff=N1,N2,N3,N4,N5,N6'"
设置核心缓存管理的 6 个参数，分别是
max_buff_age, buff_advance, buff_decline,
buff_initial_age, bufferout_weight, buffermem_grace。
同样也只能用于核心控制

.SH "使用内存虚拟磁盘的启动参数"
（该参数只在核心使用 CONFIG_BLK_DEV_RAM 进行编译后才有效）
在通常情况下，在 Linux 下使用一个内存虚拟磁盘（RAMDISK）并不是一个好的方法 - 
因为系统会自动、高效的使用可用的内存。
但是当用软盘启动的时候（或者当建立一个启动软盘的时候），
将软盘的内容读到一个内存虚拟磁盘中是非常有用的。
另外的情况也有可能是有一些模块（或者是文件系统又或者是硬件的）
必须在主磁盘被访问前被调到内存中来。

在 1.3.48 版本的 Linux 中，ramdisk 的操作被彻底的改变了。
在 1.3.48 以前的版本中，内存是静态分配的，"ramdisk = N" 参数提供内存的大小。
（这些也能够在核心被编译的时候被设置，或者也可以使用
.BR rdev (8).来进行设置）
从 1.3.48 开始，内存虚拟磁盘开始使用高速缓存，而且可以动态的增加其空间。
如果需要了解有关最新的内存虚拟磁盘设置（比如你要了解怎么使用
.BR rdev (8)
来进行ramdisk的设置）
请查看
.IR /usr/src/linux/Documentation/ramdisk.txt .

有关的参数一共有四个，两个是布尔变量，两个是整型值。

.SS "`load_ramdisk=N'"
如果 N=1，载入一个内存虚拟磁盘。如果 N=0，不载入内存虚拟磁盘（这是缺省值）。


.SS "`prompt_ramdisk=N'"
如果 N=1，需要提示插入软盘。（这是缺省值）
如果 N=0，没有提示。（因此，这个参数永远也不会需要）

.SS "`ramdisk_size=N' 或者 `ramdisk=N'
设置内存虚拟磁盘的最大空间为 N kB。缺省值是 4096 kB (4MB)。

.SS "`ramdisk_start=N'"
设置启动块数值（也就是内存虚拟磁盘从软盘的多少偏移量位置开始）为 N。
由于紧跟在内存虚拟磁盘后面的是核心映象文件，所以这个设置是必要的。

.SS "`noinitrd'"
（只有核心在编译时使用了 CONFIG_BLK_DEV_RAM 标志和
CONFIG_BLK_DEV_INITRD 标志时才会有效）
目前，我们基本上可以通过编译核心使其支持使用初始化内存虚拟磁盘
（initrd:Initial Ramdisk）。当启用 initrd 的时候，
启动进程会载入核心和一个已经初始化的内存虚拟磁盘，
然后核心会将 initrd 转变为一个"普通的"内存虚拟磁盘，
并将它激活为可读写的根设备。接下来，会被执行 /linuxrc，
"真正的"根文件系统被激活，而 initrd 文件系统则被转移到 /initrd 目录下。
最后顺序执行正常的启动程序（比如说是 /sbin/init 程序）。
如果希望得到关于 initrd 的详细的介绍，可以参考
.IR /usr/src/linux/Documentation/initrd.txt．

自然，'noinitrd' 参数告诉核心，尽管核心是按照使用 initrd 的参数来编译的，
但是也不需要使用我们上面描述的过程。但是，仍然保留 initrd 的所有数据到
.IR /dev/initrd .
目录下。
（该设备只能被使用一次，数据在最后一个使用 initrd 的进程被关闭后会释放掉）
.IR /dev/initrd ．）


.SH "SCSI设备启动参数"

关于这个区域的一些符号说明：

.I iobase
第一个SCSI主设备占用的I/O端口。它用 16 进制的数据指定，一般介于 0x200 到 0x3ff 之间。

.I irq
SCSI 卡设置的硬件中断号。具体的值取决于 SCSI 卡的具体要求，
一般使用的中断号是 5，7，9，10，11，12 和 15。
其他的中断号一般会被一些外设所占用，比如说，IDE 接口的硬盘，软盘驱动器，串口等等。

.I scsi-id
SCSI 适配器在 SCSI 总线上使用的用来标识自身的识别号码（ID）。
只有一部分 SCSI 适配器允许你改动该 ID 的值，大部分都是被固化好的。
缺省值一般是 7，可是，在 Seagate 和Future Domain TMC-950 的板卡上是 6。

.I parity
是否允许 SCSI 适配器在交换数据的时候使用奇偶效验。
指定一个非零值，奇偶效验会起用，如果指定为零则不会启动奇偶效验。
同样，不是所有的 SCSI 适配卡支持选择奇偶效验的启动参数。

.SS "`max_scsi_luns=...'"

一个 SCSI 设备能够使用一些包括它自己在内的"子设备"。
最常用的例子是现在的 SCSI CD-ROM 设备能够同时处理多张光盘。
每张光盘使用"逻辑单元号码"(LUN)来确定其位置。
当然，大部分设备，比如硬盘，磁带机都只能处理一个设备，因此它们的 LUN 会被设置为 0
一些设计上有缺陷的 SCSI 设备一旦发现 LUN 号码不为零时，就可能不再继续工作。
因此，如果在编译的时候没有设置 CONFIG_SCSI_MULTI_LUN 标志，
新的核心将使用 0 作为缺省值。

如果需要在启动的时候指定 LUN 的值，可以使用 "max_scsi_luns=n" 作为启动参数，
而 n 是一个大于 1 小于 8 的数值。
为了避免上面描述的问题，使用 n=1 可以避免那些设备的造成的错误。

.SS "SCSI 磁带配置"

一些 SCSI 磁带设备的启动设置能够使用下面的格式来进行：
.IP
.BI st= buf_size[,write_threshold[,max_bufs]]
.LP
前面的两个数字指定单元的大小（kB），缺省的值
.I buf_size
是 32kB，最大的值可以指定为 16384kB。
.I write_threshold
是磁带得到的缓存区大小，缺省的是 30kB。
其最大的缓存值依据不同的驱动设备的个数而得到不同的值，缺省值是两个设备。
缺省的格式可能象下面这样
.IP
st=32,30,2
.LP
你能够在核心源码的 scsi 目录下的 README.st 中看到所有的细节。


.SS "Adaptec aha151x, aha152x, aic6260, aic6360, SB16-SCSI 配置"

在这一句中 aha 数值代表适配卡类型，aic 数值表示适配卡的 SCSI 芯片类型，
也包括象 Soundblaster-16 这样的 SCSI 设备。

SCSI 主设备探测程序将从已经安装好的 BIOS 中进行查找，
如果没有的话，该检测将不会找到你的设备。
那么，你就必须使用以下格式的启动参数：
.IP
.BI aha152x= iobase[,irq[,scsi-id[,reconnect[,parity]]]]
.LP
如果驱动程序是以调试模式编译的话，第六个值能够被指定设置调试的级别。

其他的参数已经在上面描述过了。值得一提的是
.I reconnect
参数如果是非零值就能够允许设备"断连和重新连接"。下面是一个例子。
.IP
aha152x=0x340,11,7,1
.LP
要注意到的是参数必须按指定的顺序来设定，
这意味着如果你需要指定奇偶参数的话你就必须指定其他的所有参数。

.SS "Adaptec aha154x 配置"

aha1542 系列的适配卡上有一个 i82077 软盘控制器，aha1540 系列的卡没有。
这种卡叫做总线主控卡，它们能够通过参数的设置"合理"的与其他设备共享总线。
它们的启动参数就象下面这样：
.IP
.BI aha1542= iobase[,buson,busoff[,dmaspeed]]
.LP
通常可用的 iobase 值会是 0x130，0x134，0x230，0x234，0x330，0x334 其中的一个。
兼容的卡能够允许使用其他值。

.IR buson ", " busoff
值表示的是该卡占用 ISA 总线的时间（以微秒计）。缺省值是 11 微秒开，4 微秒关，
这样其他的卡（比如说基于 ISA 总线的 LANCE 以太网卡）就能够有机会访问 ISA 总线。

.I dmaspeed
值代表直接存储访问 （DMA） 的传输速度 （以MB/秒为单位）。
缺省值是 5MB/秒。
较新版本的卡允许你使用软件设置来选择该值，老版本的卡使用跳线来设置。
如果你的主板支持的话，你能够将该值提高到 10MB/秒。
如果使用 5MB/秒以上的传输速度，你就应该进行很小心的实验。

.SS "Adaptec aha274x, aha284x, aic7xxx 配置"

这些板卡能够接受象下面这样格式的参数：
.IP
.BI aic7xxx= extended,no_reset
.LP
.I extended
值，如果是非零的话，表明大容量磁盘的扩展转换模式可以被使用。而
.I no_reset
值如果是非零的话，告诉驱动程序在设置 SCSI 卡后重新启动时不要重新设置 SCSI 总线。

.SS "AdvanSys SCSI Hosts configuration (`advansys=')"

AdvanSys 驱动程序能够接收（最多） 4 个 I/O 地址用于来探测 AdvanSys SCSI 卡。
要注意的是这些值（如果使用了它们）并不会对 EISA 总线或者 PCI 总线的检测有任何作用。
它们只能用来检测 ISA 总线和 VLB 总线型的卡。
另外，如果驱动程序是使用调试模式编译的话，
调试级别能够通过加入一个 0xdeb[value] 参数来设定。
value 可以是 0-f（16进制），代表可以得到多达 16 个级别的调试信息。

.SS "AM53C974"
.IP
.BI AM53C974= host-scsi-id,target-scsi-id,max-rate,max-offset
.LP

.SS "BusLogic SCSI Hosts 配置 (`BusLogic=')"
.IP
.BI BusLogic= N1,N2,N3,N4,N5,S1,S2,...
.LP
作为更深层次的讨论，我们来分析一下 BusLogic 命令行参数，参考一下
.IR /usr/src/linux/drivers/scsi/BusLogic.c
(在我看的核心版本中是3149-3270行). 下面的文字是一段精辟的摘录

参数 N1-N5 是整数。参数 S1 是字符串。N1 是适配卡的 I/O 地址。
N2 是标记队列深度（Tagged Queue Depth），
是为那些支持标记队列（Tagged Queue）的目标设备而设置的。
N3 是总线停滞时间（以秒计），
这是表示从 SCSI 适配卡重新启动 SCSI 总线到发出一个 SCSI 指令之间的时间。 
N4 是区域选项（只适合特定的单个适配卡）
N5 是全局选项（针对所有的适配卡） 

字符串参数用来对于标记队列控制
（TQ:Default，TQ:Enable，TQ:Disable，TQ:<Per-Target-Spec>），
出错处理（ER:Default，ER:HardReset，ER:BusDeviceReset，ER:None，ER:<Per-Target-Spec>）
和适配卡检测（NoProbe，NoProbeISA，NoProbePCI）。

.SS "EATA/DMA 配置"
缺省的需要检测的 I/O 端口能够使用以下的参数来改变：
.IP
.BI eata= iobase,iobase,... .
.LP

.SS "Future Domain TMC-16x0 配置"
.IP
.BI fdomain= iobase,irq[,adapter_id]
.LP

.SS "Great Valley Products (GVP) SCSI 控制器配置"
.IP
.BI gvp11= dma_transfer_bitmask
.LP

.SS "Future Domain TMC-8xx, TMC-950 配置"
.IP
.BI tmc8xx= mem_base,irq
.LP
在这里，
.I mem_base
值是卡所使用的内存映射的 I/O 区域值。
常见的值会是 0xc8000，0xca000，0xcc000，0xce000，0xdc000，0xde000。

.SS "IN2000 配置"
.IP
.BI in2000= S
.LP
这里 S 是一个用逗号分隔的关键字 [：值]
可以被识别的关键字（有可能伴随着值）是：
ioport:addr, noreset, nosync:x, period:ns, disconnect:x,debug:x, proc:x.
如果你要了解这些参数的功能的话，请看
.IR /usr/src/linux/drivers/scsi/in2000.c .

.SS "NCR5380 和 NCR53C400 配置"
这个启动参数遵循以下的格式

.IP
.BI ncr5380= iobase,irq,dma
.LP
或者
.IP
.BI ncr53c400= iobase,irq
.LP
如果卡没有使用中断，那么 IRQ 值 255（0xff）将被用来屏蔽中断。
IRQ 值 254 表示自动检测，更多的细节可以从下面的文档中得到。
.IR /usr/src/linux/drivers/scsi/README.g_NCR5380 .

.SS "NCR53C8xx 配置"
.IP
.BI ncr53c8xx= S
.LP
这里 S 是一个用逗号分隔的关键字 [：值]
可以被识别的关键字（有可能伴随着值）是：
mpar (master_parity), spar (scsi_parity),disc (disconnection), 
specf (special_features), ultra (ultra_scsi),fsn (force_sync_nego), 
tags (default_tags), sync (default_sync),
verb (verbose), debug (debug), burst (burst_max).
如果需要了解这些值的功能，请参考
.IR /usr/src/linux/drivers/scsi/ncr53c8xx.c .

.SS "NCR53c406a 配置"
.IP
.BI ncr53c406a= iobase[,irq[,fastpio]]
.LP
指定 irq = 0 适用于无中断驱动模式。
设置 fastpio = 1 设置为快速的处理器 I/O（PIO）模式，0 是慢速的处理器 I/O（PIO）模式。 

.SS "IOMEGA PPA3 配置"
.IP
.BI ppa= iobase[,speed_high[,speed_low[,nybble]]]
.LP
这里 iobase 的值是并口的地址（缺省值是 0x378），
speed_high 是在数据处理时延迟时间（以微秒为单位，缺省值是 1），
speed_low 是端口其他状态下的延迟时间（以微秒为单位，缺省值是 6），
nybble 是一个 BOOL 值，表示是不是强制使用半个字节（4个位）的工作模式，
缺省值是"假"。
更多细节请参考
.IR /usr/src/linux/drivers/scsi/README.ppa .

.SS "Pro Audio Spectrum 配置"

PAS16 适配卡使用 NC5380 SCSI 芯片，较新的版本支持免跳线模式。启动参数是下列格式：

.IP
.BI pas16= iobase,irq
.LP
不同点是你可以指定 IRQ 的值是 255，
这样你就可让驱动程序不要使用中断，当然这样会降低性能。
通常 iobase 的值是0x388。

.SS "Seagate ST-0x 配置"

如果你的卡没有在启动的时候被检测到，你需要使用下面格式的启动参数：
.IP
.BI st0x= mem_base,irq
.LP
这里
.I mem_base
值是卡所使用的内存映射的 I/O 区域值。
通常的值会是 0xc8000，0xca000，0xcc000，0xce000，0xdc000，0xde000。

.SS "Trantor T128 配置"

这种卡也是使用 NCR5380 芯片组，并且接受以下的选项：
.IP
.BI t128= mem_base,irq
.LP
.I mem_base
的值0xc8000，0xcc000，0xdc000，0xd8000。


.SS "UltraStor 14F/34F 配置"
检测出的缺省的 I/O 端口列表能够被
.IP
.BI eata= iobase,iobase,... .
.LP
所改变。

.SS "WD7000 配置"
.IP
.BI wd7000= irq,dma,iobase
.LP

.SS "Commodore Amiga A2091/590 SCSI 控制器配置"
.IP
.BI wd33c93= S
.LP
这里 S 是一个用逗号分隔的字符串选项。
可以被识别的选项字是：
nosync:bitmask, nodma:x, eriod:ns, disconnect:x, debug:x, clock:x, next．
详细说明请参考
.IR /usr/src/linux/drivers/scsi/wd33c93.c .

.SH "硬盘驱动器"

.SS "IDE 硬盘驱动器/光驱驱动程序参数"

IDE 驱动程序可以接受的参数有很多，
其范围包括从磁盘规格到有缺陷的控制器芯片的支持。
指定驱动程序参数的同时需要使用 "hdX=" 的格式来指定驱动器。
X 的范围是从 "a" 到 "h"。

非驱动器选项使用前缀 "hd=" 来指定。
注意如果将驱动器选项作用于非驱动器选项也可以工作，
而且选项也能够象你所期望的那样被应用。

同时还要注意到的是 "hd=" 格式也能够用于按照规定的顺序（从 a 到 h）
检索到下一个没有指定的驱动器。在下面的讨论中，我们可以看到 "hd=" 选项将会被短暂的引用。
需要了解更多细节的话，参考 linux/drivers/block 目录下的 README.ide

.SS "`hd=cyls,heads,sects[,wpcom[,irq]]' 选项"

这些选项用来指定磁盘的物理参数。前面三个参数是必须的。
柱面/磁头/磁道三个参数将被 fdisk 程序所使用。
如果是 IDE 的硬盘驱动器，"写补偿"值会被忽略掉。
指定的 IRQ 值是接口程序所使用的，所以其实并不能被称为真正意义上的指定的驱动器参数。

.SS "`hd=serialize' 选项"
具有双 IDE 接口的 CMD-640 芯片在设计上是有缺陷的。
这个缺陷是当第二个接口与第一个接口被同时使用时，将会破坏你的数据。
使用这个选项能够使你的接口永远不会同时使用。

.SS "`hd=dtc2278'选项"

这个选项告诉驱动程序你拥有一个 DTC-2278D 的 IDE 接口。
驱动程序就会试图使用 DTC 的指定操作来激活第二个接口并启动快速传送模式。

.SS "`hd=noprobe'选项"

不要检测该硬盘驱动器。例如，
.IP
hdb=noprobe hdb=1166,7,17
.LP
将会屏蔽掉检测，可是仍然指定了驱动器的物理参数，
因为这样才能够将驱动器登记成为一个有效的、可用的块设备。

.SS "`hd=nowerr'选项"

一些驱动器具有 WRERR_STAT 位，并且永久有效。这个选项忽略该位。

.SS "`hd=cdrom'选项"

这个选项告诉 IDE 驱动程序有一个 ATAPI 兼容的光盘驱动器。
在大部分情况下光盘驱动器会被自动的识别，
但是对于不能识别的光盘驱动器来说，
这个选项是很有用的。

.SS "标准的 ST-506 磁盘驱动程序参数 (`hd=')"

标准的磁盘驱动程序可以接受磁盘的物理参数，就象上面的 IDE 设备那样。
注意无论怎样它都只希望接受三个参数（柱面/磁头/磁道）-- 过多或过少的参数都会被忽略掉。
当然，它只接受 "hd=" 这样的参数，象 "had=" 参数这样的在这里是无效的。下面是它的格式：
.IP
hd=cyls,heads,sects
.LP
如果装有两个磁盘驱动器，上面的工作需要重复的进行以配置第二个磁盘驱动器。

.SS "XT 磁盘驱动程序参数 (`xd=')"

如果你不幸使用了一些些老掉牙的、8 位的和使用惊人的 125kB/s 传输速度的卡，
这些参数会对你有帮助。
如果它们不能被识别的话，你只能使用以下格式的启动参数：
.IP
xd=type,irq,iobase,dma_chan
.LP
type 值指定该卡的制造厂商，下面是厂商的值及对应的名字：
0= 普通卡; 1=DTC; 2,3,4=Western Digital,5,6,7=Seagate; 8=OMTI. 
同一厂家出厂的不同类型的卡的区别由 BIOS 字符串来指定，如果指定 type，这些也就没有用了。

函数 xd_setup() 不检查这些值，并且会假设你已经输入了全部的四个值。
不要让它失望。
这里有一个 WD1002 控制器示范用法--假设 BIOS 被关掉/移走了--使用缺省的 XT 控制参数
.IP
xd=2,5,0x320,3
.LP

.SS "Syquest's EZ*可移动磁盘"
.IP
.BI ez= iobase[,irq[,rep[,nybble]]]
.LP

.SH "IBM MCA总线设备"
请同时参考
.IR /usr/src/linux/Documentation/mca.txt .

.SS "PS/2 ESDI hard disks"
有可能按下面的方法在启动时指定你所需要的磁盘物理参数。
.IP
.BI ed= cyls,heads,sectors.
.LP
对于ThinkPad-720, 要加上下面的选项
.IP
.BR tp720=1 .
.LP

.SS "IBM Microchannel SCSI Subsystem 配置"
.IP
.BI ibmmcascsi= N
.LP
这里 N 是子系统的\fIpun\fP (SCSI ID)

.SH "CD-ROMs (Non-SCSI/ATAPI/IDE)"

.SS "Aztech 接口"

语法是：
.IP
aztcd=iobase[,magic_number]
.LP
如果你设置 magic_number 值为0x79，
那么该驱动程序尝试在任何一个未知的固件上面执行。其他的值都会被忽略掉。

.SS "MicroSolutions `backpack' 光驱接口"
语法：
.IP
bpcd=iobase
.LP

.SS "CDU-31A 和 CDU-33A Sony 接口"

这种光盘驱动器的接口会出现在一些 Pro Audio Spectrum 声卡及
其他支持 Sony 驱动接口的卡上。语法是：
.IP
cdu31a=iobase,[irq[,is_pas_card]]
.LP
指定一个为 0 的 IRQ 告诉驱动程序该硬件不支持中断（如一些 PAS 卡）。
如果你的卡支持中断，就要使用它们，这样可以减少驱动程序的 CPU 占用时间。

对于
.I is_pas_card
选项来说，如果使用 Pro Audio Spectrum 的卡则应该输入 "PAS"，否则就不需要指定了。

.SS "CDU-535 Sony 接口"

该光盘驱动器接口的语法如下
.IP
sonycd535=iobase[,irq]
.LP
如果你要指定 IRQ 值的话，0 可以被当成一个标志位被填到 I/O 地址中。

.SS "GoldStar 接口"

该光盘驱动器的接口语法是：
.IP
gscd=iobase
.LP

.SS "ISP16 光驱接口"
语法：
.IP
isp16=[iobase[,irq[,dma[,type]]]]
.LP
（三个整数值，一个字符串）。如果 type 的值是 "noisp16" 的话，接口不会被配置。
其他可以被接受的 type 值包括： `Sanyo", `Sony', `Panasonic' 和 `Mitsumi'．

.SS "Mitsumi标准接口"

这种光盘驱动器接口的语法是：
.IP
mcd=iobase,[irq[,wait_value]]
.LP
这里
.I wait_value
被用来设置为内部故障的超时时间。能否实现还需要依靠在编译时的定义而定。
Mitsumi FX400 是一种不使用 mcd 驱动程序的 IDE/ATAPI 光盘驱动器。.

.SS "Mitsumi XA/MultiSession接口"

这是与我们上面介绍的一样的硬件，只不过该驱动程序拥有更多的特性。
语法：
.IP
mcdx=iobase[,irq]
.LP

.SS "Optics Storage 接口"

语法为：
.IP
optcd=iobase
.LP

.SS "Phillips CM206 接口"

语法是：
.IP
cm206=[iobase][,irq]
.LP

该驱动程序会假定所给的 3 到 11 之间的值是设置的 IRQ 值，
数值在 0x300 到 0x370 之间的值是 I/O 端口号，
因此你可以指定一个，或者可以指定两个，且没有特殊的位置要求。
它也接受 "cm206=auto" 参数来实现自动检测。

.SS "The Sanyo 接口"

语法是：
.IP
sjcd=iobase[,irq[,dma_channel]]
.LP

.SS "SoundBlaster Pro 接口"

语法是：
.IP
sbpcd=iobase,type
.LP
这里 type 是下面这些字符串的一种（大小写敏感的）：
`SoundBlaster', `LaserMate', 或 `SPEA'.  
I/O 地址是光盘驱动器接口的，并不是声卡的一部分。

.SH "以太网络设备"

不同的驱动程序使用不同的参数，但是至少它们都会要使用一个 IRQ，一个 I/O 端口地址，
一个名字。下面是最为普遍的参数设置格式：
.IP
ether=irq,iobase[,param_1[,...param_8]],name
.LP
第一个非数值的参数被作为名字使用。
param_n 的值（如果可以使用的话）对于不同的卡/驱动程序来说往往具有不同的含义。
典型的 param_n 的值用来指定象共享的内存地址，接口选择，DMA 通道等等。

该参数最普遍的用法是强迫进行第二以太网卡的检测。
因为作为缺省的情况来说，内核只是检测第一块以太网卡。
下面是实现第二以太网卡检测的简单方法：
.IP
ether=0,0,eth1
.LP
注意这里 IRQ 和 I/O 的值都是 0，这个表示值需要进行自动检测。

以太网的 HowTo 文件对于多网卡的使用，网卡/驱动程序的指定，
param_n 数值的使用都有详细的介绍。
有兴趣的读者可以参考该文档中对自己拥有的卡的说明。

.SH "软盘驱动器驱动程序"

软盘驱动程序选项有很多，它们在 linux/drivers/block 目录下的 README.fd 中列举出来。
这些信息就是摘自那个文件。

.SS "floppy=mask,allowed_drive_mask"

设置允许进行掩码设置的驱动程序将掩码设置为 mask。
在缺省情况下，只有每个软盘控制器的 0 号和 1 号单元允许这样做。
这样规定的原因是有一些非标准的硬件（华硕的 PCI 主板）在访问 2 号或者 3 号单元时，
会令键盘发生问题。该选项差不多已被 cmos 选项所取代了。

.SS "floppy=all_drives"

为所有的软盘驱动器设置驱动器掩码。
如果你在一个软盘控制器上拥有两个驱动器的话，你就可以这么做。

.SS "floppy=asus_pci"

设置掩码为只允许 0 号和 1 号单元。（缺省值）

.SS "floppy=daring"

告诉软盘驱动程序你有一个比较好的软盘控制器。
这样的设置可以使你的设备运行得更加有效和顺利，
但是对于某些特定的控制器，这可能会引起错误，也可能会加快某些操作的速度。

.SS "floppy=0,daring"

告诉软盘驱动程序你的软盘控制器需要谨慎的运行。

.SS "floppy=one_fdc"

告诉软盘驱动程序你只有一个软盘控制器。（缺省值）

.SS "floppy=two_fdc or floppy=address,two_fdc"

告诉软盘驱动程序你拥有两个软盘控制器。第二个控制器假设位于 address 值。
如果 address 的值没有给出的话，0x370 被当成假想位置。

.SS "floppy=thinkpad"

告诉软盘驱动程序你有一个 Thinkpad 电脑。Thinkpad 的磁盘变更线路与通常的机器相反。

.SS "floppy=0,thinkpad"

告诉软盘驱动程序你没有一个 Thinkpad 电脑。

.SS "floppy=drive,type,cmos"

设置 CMOS 的类型为 type 值。条件是驱动器在掩码中被置"允许"。
如果你有两个以上的软盘驱动器（在实际的 CMOS 设置中只能设置两个），
或者你的 BIOS 使用的是非标准的 CMOS 类型，这是非常有用的。
把前面两个软盘驱动器的 CMOS 设置为 0（缺省值）
使得软盘驱动程序从实际的 CMOS 设置中读取它们的信息。

.SS "floppy=unexpected_interrupts"

当接收到一个异常时显示相应的消息。（缺省行为）

.SS "floppy=no_unexpected_interrupts or floppy=L40SX"

如果出现异常，也不要提示。IBM L40SX 在某些特定的显示模式下需要这个选项。
（这看起来象是视频和软盘之间有某种交互关系。
异常中断只会影响性能，所以能够被安全的忽略）

.SH "声卡驱动程序"

声卡驱动程序也能够接受启动参数来替代编译时使用的值。
这种方法并不值得推荐，因为这样会更复杂。
参数说明在 /linux/drivers/sound/Readme.Linux 文件中描叙。它接受如下格式的启动参数：
.IP
sound=device1[,device2[,device3...[,device10]]]
.LP
这里每个 deviceN 是类似于 0xTaaaId 这样格式的值，其中各字符表示为：

T - 设备类型: 1=FM, 2=SB, 3=PAS, 4=GUS, 5=MPU401, 6=SB16,
7=SB16-MPU401。

aaa - 16 进制的 I/O 地址。

I - 16 进制表示的中断地址 。

d - DMA 通道号。

这样的格式看起来是很混乱的，你最好在编译的时候就使用你知道的值。
使用 "sound=0" 的参数将会完全屏蔽声卡驱动程序。

.SH "ISDN 驱动程序"

.SS "ICN ISDN 驱动程序"
语法：
.IP
icn=iobase,membase,icn_id1,icn_id2
.LP
这里 icn_id1 和 icn_id2 是两个字符串，用来为核心消息提供卡的名字。

.SS "PCBIT ISDN 驱动程序"
语法：
.IP
pcbit=membase1,irq1[,membase2,irq2]
.LP
这里 membaseN 是第 N 块卡其共享内存的地址，irqN 是第 N 块卡的中断值。
缺省值是 IRQ 5 和内存地址 0xD0000。

.SS "Teles ISDN 驱动程序"
语法：
.IP
teles=iobase,irq,membase,protocol,teles_id
.LP
这里 iobase 是卡的 I/O 端口地址，membase，irq 的意义与上面的一样，
teles_id 是唯一的 ASCII 字符串标识。

.SH "串口驱动程序"

.SS "RISCom/8 多串口驱动程序 (`riscom8=')"
语法:
.IP
riscom=iobase1[,iobase2[,iobase3[,iobase4]]]
.LP
更多的细节请参考
.IR /usr/src/linux/Documentation/riscom8.txt .

.SS "DigiBoard 驱动程序 (`digi=')"
如果该选项被使用，则应该使用 6 个参数。
语法：
.IP
digi=status,type,altpin,numports,iobase,membase
.LP
参数可以是整数值，也可以是字符串值。
如果使用了字符串，则 iobase 和 membase 参数需要使用 16 进制的形式。
整型参数值按顺序为：
status (允许(1) 或屏蔽(0)该卡),
type (PC/Xi(0), PC/Xe(1), PC/Xeve(2), PC/Xem(3)),
altpin (允许(1)或屏蔽(0) alternate pin排列),
numports (该卡的端口数目),
iobase (该卡设置的I/O 端口号 (16进制)),
membase (内存窗口的基地址(16进制)).
所以，下面两个不同格式的参数形式其实是一样的：
.IP
digi=E,PC/Xi,D,16,200,D0000
.br
digi=1,0,0,16,0x200,851968
.LP
更多的细节请参考
.IR /usr/src/linux/Documentation/digiboard.txt .

.SS "Baycom 串/并口无线 Modem"
语法：
.IP
baycom=iobase,irq,modem
.LP
只有三个参数；如果有多张卡，就使用多个该命令。
modem 参数是一个字符串，值是 ser12，ser12*，par96，par96* 中的一个。
这里 "*" 代表使用软件 DCD。ser12 和 par96 用来选择所支持的 modem 类型。
更多的细节请参考
.IR /usr/src/linux/drivers/net/README.baycom .

.SS "Soundcard 无线 Modem 驱动程序"
语法：
.IP
soundmodem=iobase,irq,dma[,dma2[,serio[,pario]]],0,mode
.LP
除了最后一个参数以外其他的都是整型值；
你可能注意到参数中有一个 0，需要该数值是因为在设置代码中有一个错误。
模式参数是一个字符串，其语法是 hw:modem。
这里 hw 是"sbc"，"wss"，"wssfdx" 中的一个值，modem 是 "afsk1200"，"fsk9600"
中的一个值。

.SH "打印驱动程序"

.SS "`lp='"
对于 1.3.75 版本以后的核心来说，
你可以告诉打印驱动程序你使用了或没有使用哪个并行端口。
如果你不想让打印驱动程序取得所有可用的并口，后者是非常有用的，
这样其他的驱动程序（比如说 PLIP，PPA）就能够使用那些端口。

参数的格式是多个 I/O 地址及 IRQ 对。举例来说，
lp=0x3bc,0,0x378,7 将使用位于 0x3bc 地址的端口，
"无 IRQ" (轮询 IRQ) 模式，然后使用位于 0x378 地址，IRQ 为 7 的端口。
位于地址 0x278 的端口（如果有的话）不会被检测，
因为自动检测模式只发生于没有 "lp=" 参数的情况下。
如果需要屏蔽打印驱动程序的话，使用 lp=0 就可以实现。

.SS "WDT500/501驱动程序"
语法：
.IP
wdt=io,irq
.LP

.SH "鼠标驱动程序"

.SS "`bmouse=irq'"
总线型鼠标驱动程序只能接受一个参数，也就是该硬件需要的 IRQ 值。


.SS "`msmouse=irq'"
对于微软兼容鼠标来说参数与前面总线鼠标是一样的。

.SS "ATARI鼠标设置"
.LP
atamouse=threshold[,y-threshold]
.IP
如果只有一个参数，该参数同时代表 x 起点坐标和 y 起点坐标。
如果有两个参数，则第一个是 x 起点坐标，第二个是 y 起点坐标。
这些值必须是在 1 到 20 之间（包括 20）；缺省值是 2。

.SH "视频设备"

.SS "`no-scroll'"
该选项告诉控制台驱动程序不要使用硬件滚动模式
（滚动模式在将屏幕图象移动到图形储存器中而不是移动数据时非常有效）。
一些 Braille 机器会需要它的。

.SH 作者
Linus Torvalds 

.SH "参考"
.BR klogd (8),
.BR lilo.conf (5),
.BR lilo(8),
.BR mount(8),
.BR rdev(8).

该手册页的大部分内容来自 Paul Gortmaker 写的 Boot Parameter HowTo（1.0.1）版本。
在该 HowTo 中还可以找到更多的有关信息。

.SH "[中文版维护人]"
.B billpan <billpan@yeah.net>
.SH "[中文版最新更新]"
.BR 2000/11/06
.SH "《中国linux论坛man手册页翻译计划》:"
.BI http://cmpp.linuxforum.net
