.\" Copyright 2003 Walter Harms, 2004 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Created 2004-10-31. Text taken from a page by Walter Harms, 2003-09-08
.\"
.TH DRAND48_R 3 2013-09-09 "GNU" "Linux Programmer's Manual"
.SH NAME
drand48_r, erand48_r, lrand48_r, nrand48_r, mrand48_r, jrand48_r,
srand48_r, seed48_r, lcong48_r
\- generate uniformly distributed pseudo-random numbers reentrantly
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int drand48_r(struct drand48_data *" buffer ", double *" result );
.sp
.BI "int erand48_r(unsigned short " xsubi [3] ","
.br
.BI "              struct drand48_data *"buffer ", double *" result ");"
.sp
.BI "int lrand48_r(struct drand48_data *" buffer ", long int *" result );
.sp
.BI "int nrand48_r(unsigned short int " xsubi[3] ","
.br
.BI "              struct drand48_data *"buffer ", long int *" result ");"
.sp
.BI "int mrand48_r(struct drand48_data *" buffer ",long int *" result ");"
.sp
.BI "int jrand48_r(unsigned short int " xsubi[3] ","
.br
.BI "              struct drand48_data *" buffer ", long int *" result ");"
.sp
.BI "int srand48_r(long int " seedval ", struct drand48_data *" buffer ");"
.sp
.BI "int seed48_r(unsigned short int " seed16v[3] ","
.br
.BI "             struct drand48_data *" buffer ");"
.sp
.BI "int lcong48_r(unsigned short int " param[7] ","
.br
.BI "              struct drand48_data *" buffer ");"
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
All functions shown above:
.\" .BR drand48_r (),
.\" .BR erand48_r (),
.\" .BR lrand48_r (),
.\" .BR nrand48_r (),
.\" .BR mrand48_r (),
.\" .BR jrand48_r (),
.\" .BR srand48_r (),
.\" .BR seed48_r (),
.\" .BR lcong48_r ():
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE
.ad b
.SH DESCRIPTION
These functions are the reentrant analogs of the functions described in
.BR drand48 (3).
Instead of modifying the global random generator state, they use
the supplied data
.IR buffer .

Before the first use, this struct must be initialized, for example,
by filling it with zeros, or by calling one of the functions
.BR srand48_r (),
.BR seed48_r (),
or
.BR lcong48_r ().
.SH RETURN VALUE
The return value is 0.
.SH ATTRIBUTES
.SS Multithreading (see pthreads(7))
The
.BR drand48_r (),
.BR erand48_r (),
.BR lrand48_r (),
.BR nrand48_r (),
.BR mrand48_r (),
.BR jrand48_r (),
.BR srand48_r (),
.BR seed48_r (),
and
.BR lcong48_r ()
functions are thread-safe.
.SH CONFORMING TO
These functions are GNU extensions and are not portable.
.SH SEE ALSO
.BR drand48 (3),
.BR rand (3),
.BR random (3)
