.\" Copyright 2000 Sam Varshavchik <mrsam@courier-mta.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References: RFC 2553
.TH INET_NTOP 3 2008-11-11 "Linux" "Linux Programmer's Manual"
.SH NAME
inet_ntop \- convert IPv4 and IPv6 addresses from binary to text form
.SH SYNOPSIS
.nf
.B #include <arpa/inet.h>
.sp
.BI "const char *inet_ntop(int " "af" ", const void *" "src" ,
.BI "                      char *" "dst" ", socklen_t " "size" );
.fi
.SH DESCRIPTION
This function converts the network address structure
.I src
in the
.I af
address family into a character string.
The resulting string is copied to the buffer pointed to by
.IR dst ,
which must be a non-NULL pointer.
The caller specifies the number of bytes available in this buffer in
the argument
.IR size .
.PP
.BR inet_ntop ()
extends the
.BR inet_ntoa (3)
function to support multiple address families,
.BR inet_ntoa (3)
is now considered to be deprecated in favor of
.BR inet_ntop ().
The following address families are currently supported:
.TP
.B AF_INET
.I src
points to a
.I struct in_addr
(in network byte order)
which is converted to an IPv4 network address in
the dotted-decimal format, "\fIddd.ddd.ddd.ddd\fP".
The buffer
.I dst
must be at least
.B INET_ADDRSTRLEN
bytes long.
.TP
.B AF_INET6
.I src
points to a
.I struct in6_addr
(in network byte order)
which is converted to a representation of this address in the
most appropriate IPv6 network address format for this address.
The buffer
.I dst
must be at least
.B INET6_ADDRSTRLEN
bytes long.
.SH RETURN VALUE
On success,
.BR inet_ntop ()
returns a non-NULL pointer to
.IR dst .
NULL is returned if there was an error, with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EAFNOSUPPORT
.I af
was not a valid address family.
.TP
.B ENOSPC
The converted address string would exceed the size given by
.IR size .
.SH CONFORMING TO
POSIX.1-2001.
Note that RFC\ 2553 defines a prototype where the last argument
.I size
is of type
.IR size_t .
Many systems follow RFC\ 2553.
Glibc 2.0 and 2.1 have
.IR size_t ,
but 2.2 and later have
.IR socklen_t .
.\" 2.1.3: size_t, 2.1.91: socklen_t
.SH BUGS
.B AF_INET6
converts IPv4-mapped IPv6 addresses into an IPv6 format.
.SH EXAMPLE
See
.BR inet_pton (3).
.SH SEE ALSO
.BR getnameinfo (3),
.BR inet (3),
.BR inet_pton (3)
