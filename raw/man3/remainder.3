.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-08-10 Walter Harms
.\"	(walter.harms@informatik.uni-oldenburg.de)
.\" Modified 2003-11-18, 2004-10-05 aeb
.\"
.TH REMAINDER 3 2010-09-20 "" "Linux Programmer's Manual"
.SH NAME
drem, dremf, dreml, remainder, remainderf, remainderl \- \
floating-point remainder function
.SH SYNOPSIS
.nf
.B #include <math.h>
.sp
/* The C99 versions */
.BI "double remainder(double " x ", double " y );
.BI "float remainderf(float " x ", float " y );
.BI "long double remainderl(long double " x ", long double " y );
.sp
/* Obsolete synonyms */
.BI "double drem(double " x ", double " y );
.BI "float dremf(float " x ", float " y );
.BI "long double dreml(long double " x ", long double " y );
.sp
.fi
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR remainder ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED ||
_ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR remainderf (),
.BR remainderl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.br
.BR drem (),
.BR dremf (),
.BR dreml ():
.RS 4
_SVID_SOURCE || _BSD_SOURCE
.RE
.ad b
.SH DESCRIPTION
The
.BR remainder ()
function computes the remainder of dividing
.I x
by
.IR y .
The return value is
\fIx\fP\-\fIn\fP*\fIy\fP,
where
.I n
is the value
.IR "x\ /\ y" ,
rounded to the nearest integer.
If the absolute value of
\fIx\fP\-\fIn\fP*\fIy\fP
is 0.5,
.I n
is chosen to be even.

These functions are unaffected by the current rounding mode (see
.BR fenv (3)).
.LP
The
.BR drem ()
function does precisely the same thing.
.SH RETURN VALUE
On success, these
functions return the floating-point remainder,
\fIx\fP\-\fIn\fP*\fIy\fP.
If the return value is 0, it has the sign of
.IR x .

If
.I x
or
.I y
is a NaN, a NaN is returned.

If
.I x
is an infinity,
and
.I y
is not a NaN,
a domain error occurs, and
a NaN is returned.

If
.I y
is zero,
.\" FIXME . Instead, glibc gives a domain error even if x is a NaN
and
.I x
is not a NaN,
.\" Interestingly, remquo(3) does not have the same problem.
a domain error occurs, and
a NaN is returned.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is an infinity and \fIy\fP is not a NaN
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.IP
These functions do not set
.IR errno
for this case.
.\" FIXME . Is it intentional that these functions do not set errno?
.\" They do set errno for the y == 0 case, below.
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6783
.TP
Domain error: \fIy\fP is zero\" [XXX see bug above] and \fIx\fP is not a NaN
.I errno
is set to
.BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.SH CONFORMING TO
.\" IEC 60559.
The functions
.BR remainder (),
.BR remainderf (),
and
.BR remainderl ()
are specified in C99 and POSIX.1-2001.

The function
.BR drem ()
is from 4.3BSD.
The
.I float
and
.I "long double"
variants
.BR dremf ()
and
.BR dreml ()
exist on some systems, such as Tru64 and glibc2.
Avoid the use of these functions in favor of
.BR remainder ()
etc.
.SH BUGS
The call

    remainder(nan(""), 0);

returns a NaN, as expected, but wrongly causes a domain error;
it should yield a silent NaN.
.\" FIXME . this bug occurs as at glibc 2.8.
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6779
.SH EXAMPLE
The call "remainder(29.0, 3.0)" returns \-1.
.SH SEE ALSO
.BR div (3),
.BR fmod (3),
.BR remquo (3)
