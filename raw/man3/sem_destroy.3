'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SEM_DESTROY 3 2012-05-13 "Linux" "Linux Programmer's Manual"
.SH NAME
sem_destroy \- destroy an unnamed semaphore
.SH SYNOPSIS
.nf
.B #include <semaphore.h>
.sp
.BI "int sem_destroy(sem_t *" sem );
.fi
.sp
Link with \fI\-pthread\fP.
.SH DESCRIPTION
.BR sem_destroy ()
destroys the unnamed semaphore at the address pointed to by
.IR sem .

Only a semaphore that has been initialized by
.BR sem_init (3)
should be destroyed using
.BR sem_destroy ().

Destroying a semaphore that other processes or threads are
currently blocked on (in
.BR sem_wait (3))
produces undefined behavior.

Using a semaphore that has been destroyed produces undefined results,
until the semaphore has been reinitialized using
.BR sem_init (3).
.SH RETURN VALUE
.BR sem_destroy ()
returns 0 on success;
on error, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EINVAL
.I sem
is not a valid semaphore.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
An unnamed semaphore should be destroyed with
.BR sem_destroy ()
before the memory in which it is located is deallocated.
Failure to do this can result in resource leaks on some implementations.
.\" But not on NPTL, where sem_destroy () is a no-op..
.SH SEE ALSO
.BR sem_init (3),
.BR sem_post (3),
.BR sem_wait (3),
.BR sem_overview (7)
