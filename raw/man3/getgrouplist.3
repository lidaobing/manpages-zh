.\" Copyright (C) 2008, Linux Foundation, written by Michael Kerrisk
.\" <mtk.manpages@gmail.com>
.\"
.\" A few pieces remain from an earlier version written in
.\" 2002 by Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH GETGROUPLIST 3 2008-07-03 "GNU" "Linux Programmer's Manual"
.SH NAME
getgrouplist \- get list of groups to which a user belongs
.SH SYNOPSIS
.B #include <grp.h>
.sp
.BI "int getgrouplist(const char *" user ", gid_t " group ,
.br
.BI "                 gid_t *" groups ", int *" ngroups );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR getgrouplist ():
_BSD_SOURCE
.SH DESCRIPTION
The
.BR getgrouplist ()
function scans the group database (see
.BR group (5))
to obtain the list of groups that
.I user
belongs to.
Up to
.I *ngroups
of these groups are returned in the array
.IR groups .

If it was not among the groups defined for
.I user
in the group database, then
.I group
is included in the list of groups returned by
.BR getgrouplist ();
typically this argument is specified as the group ID from
the password record for
.IR user .

The
.I ngroups
argument is a value-result argument:
on return it always contains the number of groups found for
.IR user ,
including
.IR group ;
this value may be greater than the number of groups stored in
.IR groups .
.SH RETURN VALUE
If the number of groups of which
.I user
is a member is less than or equal to
.IR *ngroups ,
then the value
.I *ngroups
is returned.

If the user is a member of more than
.I *ngroups
groups, then
.BR getgrouplist ()
returns \-1.
In this case the value returned in
.IR *ngroups
can be used to resize the buffer passed to a further call
.BR getgrouplist ().
.SH VERSIONS
This function is present since glibc 2.2.4.
.SH CONFORMING TO
This function is nonstandard; it appears on most BSDs.
.SH BUGS
In glibc versions before 2.3.3,
the implementation of this function contains a buffer-overrun bug:
it returns the complete list of groups for
.IR user
in the array
.IR groups ,
even when the number of groups exceeds
.IR *ngroups .
.SH EXAMPLE
.PP
The program below displays the group list for the user named in its
first command-line argument.
The second command-line argument specifies the
.I ngroups
value to be supplied to
.BR getgrouplist ().
The following shell session shows examples of the use of this program:
.in +4n
.nf

.RB "$" " ./a.out cecilia 0"
getgrouplist() returned \-1; ngroups = 3
.RB "$" " ./a.out cecilia 3"
ngroups = 3
16 (dialout)
33 (video)
100 (users)
.fi
.in
.SS Program source
\&
.nf
#include <stdio.h>
#include <stdlib.h>
#include <grp.h>
#include <pwd.h>

int
main(int argc, char *argv[])
{
    int j, ngroups;
    gid_t *groups;
    struct passwd *pw;
    struct group *gr;

    if (argc != 3) {
        fprintf(stderr, "Usage: %s <user> <ngroups>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    ngroups = atoi(argv[2]);

    groups = malloc(ngroups * sizeof (gid_t));
    if (groups == NULL) {
        perror("malloc");
        exit(EXIT_FAILURE);
    }

    /* Fetch passwd structure (contains first group ID for user) */

    pw = getpwnam(argv[1]);
    if (pw == NULL) {
        perror("getpwnam");
        exit(EXIT_SUCCESS);
    }

    /* Retrieve group list */

    if (getgrouplist(argv[1], pw\->pw_gid, groups, &ngroups) == \-1) {
        fprintf(stderr, "getgrouplist() returned \-1; ngroups = %d\\n",
                ngroups);
	exit(EXIT_FAILURE);
    }

    /* Display list of retrieved groups, along with group names */

    fprintf(stderr, "ngroups = %d\\n", ngroups);
    for (j = 0; j < ngroups; j++) {
        printf("%d", groups[j]);
        gr = getgrgid(groups[j]);
        if (gr != NULL)
            printf(" (%s)", gr\->gr_name);
        printf("\\n");
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR getgroups (2),
.BR setgroups (2),
.BR getgrent (3),
.BR group (5),
.BR passwd (5)
