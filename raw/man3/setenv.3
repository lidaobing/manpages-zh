.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright (C) 2004, 2007 Michael kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:20:58 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Feb 14 21:47:50 1997 by Andries Brouwer (aeb@cwi.nl)
.\" Modified 9 Jun 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Changed unsetenv() prototype; added EINVAL error
.\"     Noted nonstandard behavior of setenv() if name contains '='
.\" 2005-08-12, mtk, glibc 2.3.4 fixed the "name contains '='" bug
.\"
.TH SETENV 3  2013-10-11 "GNU" "Linux Programmer's Manual"
.SH NAME
setenv \- change or add an environment variable
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int setenv(const char *" name ", const char *" value ", int " overwrite );
.sp
.BI "int unsetenv(const char *" name );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR setenv (),
.BR unsetenv ():
.RS 4
_BSD_SOURCE || _POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600
.RE
.ad b
.SH DESCRIPTION
The
.BR setenv ()
function adds the variable
.I name
to the
environment with the value
.IR value ,
if
.I name
does not
already exist.
If
.I name
does exist in the environment, then
its value is changed to
.IR value
if
.I overwrite
is nonzero;
if
.IR overwrite
is zero, then the value of
.I name
is not changed (and
.BR setenv ()
returns a success status).
This function makes copies of the strings pointed to by
.I name
and
.I value
(by contrast with
.BR putenv (3)).
.PP
The
.BR unsetenv ()
function deletes the variable
.I name
from
the environment.
If
.I name
does not exist in the environment,
then the function succeeds, and the environment is unchanged.
.SH RETURN VALUE
The
.BR setenv ()
function returns zero on success,
or \-1 on error, with
.I errno
set to indicate the cause of the error.

The
.BR unsetenv ()
function returns zero on success,
or \-1 on error, with
.I errno
set to indicate the cause of the error.
.SH ERRORS
.TP
.B EINVAL
.I name
is NULL, points to a string of length 0,
or contains an \(aq=\(aq character.
.TP
.B ENOMEM
Insufficient memory to add a new variable to the environment.
.SH CONFORMING TO
4.3BSD, POSIX.1-2001.
.SH NOTES
POSIX.1-2001 does not require
.BR setenv ()
or
.BR unsetenv ()
to be reentrant.

Prior to glibc 2.2.2,
.BR unsetenv ()
was prototyped
as returning
.IR void ;
more recent glibc versions follow the
POSIX.1-2001-compliant prototype shown in the SYNOPSIS.
.SH BUGS
POSIX.1-2001 specifies that if
.I name
contains an \(aq=\(aq character, then
.BR setenv ()
should fail with the error
.BR EINVAL ;
however, versions of glibc before 2.3.4 allowed an \(aq=\(aq sign in
.IR name .
.SH SEE ALSO
.BR clearenv (3),
.BR getenv (3),
.BR putenv (3),
.BR environ (7)
