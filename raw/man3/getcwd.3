.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 21 22:35:42 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 18 Mar 1996 by Martin Schulze (joey@infodrom.north.de):
.\"   Corrected description of getwd().
.\" Modified Sat Aug 21 12:32:12 MET 1999 by aeb - applied fix by aj
.\" Modified Mon Dec 11 13:32:51 MET 2000 by aeb
.\" Modified Thu Apr 22 03:49:15 CEST 2002 by Roger Luethi <rl@hellgate.ch>
.\"
.TH GETCWD 3 2010-09-20 "GNU" "Linux Programmer's Manual"
.SH NAME
getcwd, getwd, get_current_dir_name \- get current working directory
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.sp
.BI "char *getcwd(char *" buf ", size_t " size );
.sp
.BI "char *getwd(char *" buf );
.sp
.B "char *get_current_dir_name(void);"
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.sp
.in
.BR get_current_dir_name ():
.RS
_GNU_SOURCE
.RE
.sp
.BR getwd ():
.ad l
.RS 4
.PD 0
.TP 4
Since glibc 2.12:
.nf
_BSD_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200809L || _XOPEN_SOURCE\ >=\ 700)
.TP 4
.fi
Before glibc 2.12:
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.PD
.RE
.ad b
.SH DESCRIPTION
These functions return a null-terminated string containing an
absolute pathname that is the current working directory of
the calling process.
The pathname is returned as the function result and via the argument
.IR buf ,
if present.

The
.BR getcwd ()
function copies an absolute pathname of the current working directory
to the array pointed to by
.IR buf ,
which is of length
.IR size .
.PP
If the length of the absolute pathname of the current working directory,
including the terminating null byte, exceeds
.I size
bytes, NULL is returned, and
.I errno
is set to
.BR ERANGE ;
an application should check for this error, and allocate a larger
buffer if necessary.
.PP
As an extension to the POSIX.1-2001 standard, Linux (libc4, libc5, glibc)
.BR getcwd ()
allocates the buffer dynamically using
.BR malloc (3)
if
.I buf
is NULL.
In this case, the allocated buffer has the length
.I size
unless
.I size
is zero, when
.I buf
is allocated as big as necessary.
The caller should
.BR free (3)
the returned buffer.

.BR get_current_dir_name ()
will
.BR malloc (3)
an array big enough to hold the absolute pathname of
the current working directory.
If the environment
variable
.B PWD
is set, and its value is correct, then that value will be returned.
The caller should
.BR free (3)
the returned buffer.

.BR getwd ()
does not
.BR malloc (3)
any memory.
The
.I buf
argument should be a pointer to an array at least
.B PATH_MAX
bytes long.
If the length of the absolute pathname of the current working directory,
including the terminating null byte, exceeds
.B PATH_MAX
bytes, NULL is returned, and
.I errno
is set to
.BR ENAMETOOLONG .
(Note that on some systems,
.B PATH_MAX
may not be a compile-time constant;
furthermore, its value may depend on the filesystem, see
.BR pathconf (3).)
For portability and security reasons, use of
.BR getwd ()
is deprecated.
.SH RETURN VALUE
On success, these functions return a pointer to a string containing
the pathname of the current working directory.
In the case
.BR getcwd ()
and
.BR getwd ()
this is the same value as
.IR buf .

On failure, these functions return NULL, and
.I errno
is set to indicate the error.
The contents of the array pointed to by
.I buf
are undefined on error.
.SH ERRORS
.TP
.B EACCES
Permission to read or search a component of the filename was denied.
.TP
.B EFAULT
.I buf
points to a bad address.
.TP
.B EINVAL
The
.I size
argument is zero and
.I buf
is not a NULL pointer.
.TP
EINVAL
.BR getwd ():
.I buf
is NULL.
.TP
ENAMETOOLONG
.BR getwd ():
The size of the null-terminated absolute pathname string exceeds
.B PATH_MAX
bytes.
.TP
.B ENOENT
The current working directory has been unlinked.
.TP
.B ERANGE
The
.I size
argument is less than the length of the absolute pathname of the
working directory, including the terminating null byte.
You need to allocate a bigger array and try again.
.SH CONFORMING TO
.BR getcwd ()
conforms to POSIX.1-2001.
Note however that POSIX.1-2001 leaves the behavior of
.BR getcwd ()
unspecified if
.I buf
is NULL.

.BR getwd ()
is present in POSIX.1-2001, but marked LEGACY.
POSIX.1-2008 removes the specification of
.BR getwd ().
Use
.BR getcwd ()
instead.
POSIX.1-2001
does not define any errors for
.BR getwd ().

.BR get_current_dir_name ()
is a GNU extension.
.SH NOTES
Under Linux, the function
.BR getcwd ()
is a system call (since 2.1.92).
On older systems it would query
.IR /proc/self/cwd .
If both system call and proc filesystem are missing, a
generic implementation is called.
Only in that case can
these calls fail under Linux with
.BR EACCES .
.LP
These functions are often used to save the location of the current working
directory for the purpose of returning to it later.
Opening the current
directory (".") and calling
.BR fchdir (2)
to return is usually a faster and more reliable alternative when sufficiently
many file descriptors are available, especially on platforms other than Linux.
.SH SEE ALSO
.BR chdir (2),
.BR fchdir (2),
.BR open (2),
.BR unlink (2),
.BR free (3),
.BR malloc (3)
