.\" Copyright 2004 Andries Brouwer <aeb@cwi.nl>.
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH SCALB 3 2013-03-23 "" "Linux Programmer's Manual"
.SH NAME
scalb, scalbf, scalbl \- multiply floating-point number
by integral power of radix (OBSOLETE)
.SH SYNOPSIS
.B #include <math.h>
.sp
.BI "double scalb(double " x ", double " exp );
.br
.BI "float scalbf(float " x ", float " exp );
.br
.BI "long double scalbl(long double " x ", long double " exp );
.sp
Link with \fI\-lm\fP.
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR scalb ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.br
.BR scalbf (),
.BR scalbl ():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600
.RE
.ad b
.SH DESCRIPTION
These functions multiply their first argument
.I x
by
.B FLT_RADIX
(probably 2)
to the power of
.IR exp ,
that is:
.nf

    x * FLT_RADIX ** exp
.fi

The definition of
.B FLT_RADIX
can be obtained by including
.IR <float.h> .
.\" not in /usr/include but in a gcc lib
.SH RETURN VALUE
On success, these functions return
.IR x
*
.B FLT_RADIX
**
.IR exp .

If
.I x
or
.I exp
is a NaN, a NaN is returned.

If
.I x
is positive infinity (negative infinity),
and
.I exp
is not negative infinity,
positive infinity (negative infinity) is returned.

If
.I x
is +0 (\-0), and
.I exp
is not positive infinity, +0 (\-0) is returned.

If
.I x
is zero, and
.I exp
is positive infinity,
a domain error occurs, and
a NaN is returned.

If
.I x
is an infinity,
and
.I exp
is negative infinity,
a domain error occurs, and
a NaN is returned.

If the result overflows,
a range error occurs,
and the functions return
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
respectively, with a sign the same as
.IR x .

If the result underflows,
a range error occurs,
and the functions return zero, with a sign the same as
.IR x .
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.PP
The following errors can occur:
.TP
Domain error: \fIx\fP is 0, and \fIexp\fP is positive infinity, \
or \fIx\fP is positive infinity and \fIexp\fP is negative infinity \
and the other argument is not a NaN
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.TP
Range error, overflow
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An overflow floating-point exception
.RB ( FE_OVERFLOW )
is raised.
.TP
Range error, underflow
.\" .I errno
.\" is set to
.\" .BR ERANGE .
An underflow floating-point exception
.RB ( FE_UNDERFLOW )
is raised.
.PP
These functions do not set
.IR errno .
.\" FIXME . Is it intentional that these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6803
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6804
.SH CONFORMING TO
.BR scalb ()
is specified in POSIX.1-2001, but marked obsolescent.
POSIX.1-2008 removes the specification of
.BR scalb (),
recommending the use of
.BR scalbln (3),
.BR scalblnf (3),
or
.BR scalblnl (3)
instead.
The
.BR scalb ()
function is from 4.3BSD.

.BR scalbf ()
and
.BR scalbl ()
are unstandardized;
.BR scalbf ()
is nevertheless present on several other systems
.\" Looking at header files: scalbf() is present on the
.\" BSDs, Tru64, HP-UX 11, Irix 6.5; scalbl() is on HP-UX 11 and Tru64.
.SH SEE ALSO
.BR ldexp (3),
.BR scalbln (3)
