\" Copyright (C) 2001 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2006-08-02, mtk, Added example program
.\"
.TH MAKECONTEXT 3 2013-02-12 "GNU" "Linux Programmer's Manual"
.SH NAME
makecontext, swapcontext \- manipulate user context
.SH SYNOPSIS
.B #include <ucontext.h>
.sp
.BI "void makecontext(ucontext_t *" ucp ", void (*" func )(),
.BI "int " argc ", ...);"
.sp
.BI "int swapcontext(ucontext_t *" oucp ", ucontext_t *" ucp );
.SH DESCRIPTION
In a System V-like environment, one has the type \fIucontext_t\fP defined in
.I <ucontext.h>
and the four functions
.BR getcontext (3),
.BR setcontext (3),
.BR makecontext ()
and
.BR swapcontext ()
that allow user-level context switching
between multiple threads of control within a process.
.LP
For the type and the first two functions, see
.BR getcontext (3).
.LP
The
.BR makecontext ()
function modifies the context pointed to
by \fIucp\fP (which was obtained from a call to
.BR getcontext (3)).
Before invoking
.BR makecontext (),
the caller must allocate a new stack
for this context and assign its address to \fIucp\->uc_stack\fP,
and define a successor context and
assign its address to \fIucp\->uc_link\fP.

When this context is later activated (using
.BR setcontext (3)
or
.BR swapcontext ())
the function \fIfunc\fP is called,
and passed the series of integer
.RI ( int )
arguments that follow
.IR argc ;
the caller must specify the number of these arguments in
.IR argc .
When this function returns, the successor context is activated.
If the successor context pointer is NULL, the thread exits.
.LP
The
.BR swapcontext ()
function saves the current context in
the structure pointed to by \fIoucp\fP, and then activates the
context pointed to by \fIucp\fP.
.SH RETURN VALUE
When successful,
.BR swapcontext ()
does not return.
(But we may return later, in case \fIoucp\fP is
activated, in which case it looks like
.BR swapcontext ()
returns 0.)
On error,
.BR swapcontext ()
returns \-1 and
sets \fIerrno\fP appropriately.
.SH ERRORS
.TP
.B ENOMEM
Insufficient stack space left.
.SH VERSIONS
.BR makecontext ()
and
.BR swapcontext ()
are provided in glibc since version 2.1.
.SH CONFORMING TO
SUSv2, POSIX.1-2001.
POSIX.1-2008 removes the specifications of
.BR makecontext ()
and
.BR swapcontext (),
citing portability issues, and
recommending that applications be rewritten to use POSIX threads instead.
.SH NOTES
The interpretation of \fIucp\->uc_stack\fP is just as in
.BR sigaltstack (2),
namely, this struct contains the start and length of a memory area
to be used as the stack, regardless of the direction of growth of
the stack.
Thus, it is not necessary for the user program to
worry about this direction.

On architectures where
.I int
and pointer types are the same size
(e.g., x86-32, where both types are 32 bits),
you may be able to get away with passing pointers as arguments to
.BR makecontext ()
following
.IR argc .
However, doing this is not guaranteed to be portable,
is undefined according to the standards,
and won't work on architectures where pointers are larger than
.IR int s.
Nevertheless, starting with version 2.8, glibc makes some changes to
.BR makecontext (),
to permit this on some 64-bit architectures (e.g., x86-64).
.SH EXAMPLE
.PP
The example program below demonstrates the use of
.BR getcontext (3),
.BR makecontext (),
and
.BR swapcontext ().
Running the program produces the following output:
.in +4n
.nf

.RB "$" " ./a.out"
main: swapcontext(&uctx_main, &uctx_func2)
func2: started
func2: swapcontext(&uctx_func2, &uctx_func1)
func1: started
func1: swapcontext(&uctx_func1, &uctx_func2)
func2: returning
func1: returning
main: exiting
.fi
.in
.SS Program source
\&
.nf
#include <ucontext.h>
#include <stdio.h>
#include <stdlib.h>

static ucontext_t uctx_main, uctx_func1, uctx_func2;

#define handle_error(msg) \\
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

static void
func1(void)
{
    printf("func1: started\\n");
    printf("func1: swapcontext(&uctx_func1, &uctx_func2)\\n");
    if (swapcontext(&uctx_func1, &uctx_func2) == \-1)
        handle_error("swapcontext");
    printf("func1: returning\\n");
}

static void
func2(void)
{
    printf("func2: started\\n");
    printf("func2: swapcontext(&uctx_func2, &uctx_func1)\\n");
    if (swapcontext(&uctx_func2, &uctx_func1) == \-1)
        handle_error("swapcontext");
    printf("func2: returning\\n");
}

int
main(int argc, char *argv[])
{
    char func1_stack[16384];
    char func2_stack[16384];

    if (getcontext(&uctx_func1) == \-1)
        handle_error("getcontext");
    uctx_func1.uc_stack.ss_sp = func1_stack;
    uctx_func1.uc_stack.ss_size = sizeof(func1_stack);
    uctx_func1.uc_link = &uctx_main;
    makecontext(&uctx_func1, func1, 0);

    if (getcontext(&uctx_func2) == \-1)
        handle_error("getcontext");
    uctx_func2.uc_stack.ss_sp = func2_stack;
    uctx_func2.uc_stack.ss_size = sizeof(func2_stack);
    /* Successor context is f1(), unless argc > 1 */
    uctx_func2.uc_link = (argc > 1) ? NULL : &uctx_func1;
    makecontext(&uctx_func2, func2, 0);

    printf("main: swapcontext(&uctx_main, &uctx_func2)\\n");
    if (swapcontext(&uctx_main, &uctx_func2) == \-1)
        handle_error("swapcontext");

    printf("main: exiting\\n");
    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR sigaction (2),
.BR sigaltstack (2),
.BR sigprocmask (2),
.BR getcontext (3),
.BR sigsetjmp (3)
