'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH MQ_SEND 3 2010-09-20 "Linux" "Linux Programmer's Manual"
.SH NAME
mq_send, mq_timedsend \- send a message to a message queue
.SH SYNOPSIS
.nf
.B #include <mqueue.h>
.sp
.BI "int mq_send(mqd_t " mqdes ", const char *" msg_ptr ,
.BI "              size_t " msg_len ", unsigned " msg_prio );
.sp
.B #include <time.h>
.B #include <mqueue.h>
.sp
.BI "int mq_timedsend(mqd_t " mqdes ", const char *" msg_ptr ,
.BI "              size_t " msg_len ", unsigned " msg_prio ,
.BI "              const struct timespec *" abs_timeout );
.fi
.sp
Link with \fI\-lrt\fP.
.sp
.ad l
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR mq_timedsend ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _POSIX_C_SOURCE\ >=\ 200112L
.RE
.ad
.SH DESCRIPTION
.BR mq_send ()
adds the message pointed to by
.I msg_ptr
to the message queue referred to by the descriptor
.IR mqdes .
The
.I msg_len
argument specifies the length of the message pointed to by
.IR msg_ptr ;
this length must be less than or equal to the queue's
.I mq_msgsize
attribute.
Zero-length messages are allowed.

The
.I msg_prio
argument is a nonnegative integer that specifies the priority
of this message.
Messages are placed on the queue in decreasing order of priority,
with newer messages of the same priority being placed after
older messages with the same priority.

If the message queue is already full
(i.e., the number of messages on the queue equals the queue's
.I mq_maxmsg
attribute), then, by default,
.BR mq_send ()
blocks until sufficient space becomes available to allow the message
to be queued, or until the call is interrupted by a signal handler.
If the
.B O_NONBLOCK
flag is enabled for the message queue description,
then the call instead fails immediately with the error
.BR EAGAIN .

.BR mq_timedsend ()
behaves just like
.BR mq_send (),
except that if the queue is full and the
.B O_NONBLOCK
flag is not enabled for the message queue description, then
.I abs_timeout
points to a structure which specifies a ceiling on the time for which
the call will block.
This ceiling is an absolute timeout in seconds and nanoseconds
since the Epoch, 1970-01-01 00:00:00 +0000 (UTC), and it is
specified in the following structure:
.sp
.in +4n
.nf
struct timespec {
    time_t tv_sec;        /* seconds */
    long   tv_nsec;       /* nanoseconds */
};

.fi
.in
If the message queue is full,
and the timeout has already expired by the time of the call,
.BR mq_timedsend ()
returns immediately.
.SH RETURN VALUE
On success,
.BR mq_send ()
and
.BR mq_timedsend ()
return zero; on error, \-1 is returned, with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EAGAIN
The queue was full, and the
.B O_NONBLOCK
flag was set for the message queue description referred to by
.IR mqdes .
.TP
.B EBADF
The descriptor specified in
.I mqdes
was invalid.
.TP
.B EINTR
The call was interrupted by a signal handler; see
.BR signal (7).
.TP
.B EINVAL
The call would have blocked, and
.I abs_timeout
was invalid, either because
.I tv_sec
was less than zero, or because
.I tv_nsec
was less than zero or greater than 1000 million.
.TP
.B EMSGSIZE
.I msg_len
was greater than the
.I mq_msgsize
attribute of the message queue.
.TP
.B ETIMEDOUT
The call timed out before a message could be transferred.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
On Linux,
.BR mq_timedsend ()
is a system call, and
.BR mq_send ()
is a library function layered on top of that system call.
.SH SEE ALSO
.BR mq_close (3),
.BR mq_getattr (3),
.BR mq_notify (3),
.BR mq_open (3),
.BR mq_receive (3),
.BR mq_unlink (3),
.BR mq_overview (7),
.BR time (7)
