.\" Copyright (c) 2005 Michael Kerrisk
.\" based on earlier work by faith@cs.unc.edu and
.\" Mike Battersby <mib@deakin.edu.au>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2005-09-15, mtk, Created new page by splitting off from sigaction.2
.\"
.TH SIGPROCMASK 2 2013-04-19 "Linux" "Linux Programmer's Manual"
.SH NAME
sigprocmask \- examine and change blocked signals
.SH SYNOPSIS
.B #include <signal.h>
.sp
.BI "int sigprocmask(int " how ", const sigset_t *" set ,
.BI "sigset_t *" oldset );
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR sigprocmask ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.ad b
.SH DESCRIPTION
.BR sigprocmask ()
is used to fetch and/or change the signal mask of the calling thread.
The signal mask is the set of signals whose delivery is currently
blocked for the caller
(see also
.BR signal (7)
for more details).

The behavior of the call is dependent on the value of
.IR how ,
as follows.
.TP
.B SIG_BLOCK
The set of blocked signals is the union of the current set and the
.I set
argument.
.TP
.B SIG_UNBLOCK
The signals in
.I set
are removed from the current set of blocked signals.
It is permissible to attempt to unblock a signal which is not blocked.
.TP
.B SIG_SETMASK
The set of blocked signals is set to the argument
.IR set .
.PP
If
.I oldset
is non-NULL, the previous value of the signal mask is stored in
.IR oldset .

If
.I set
is NULL, then the signal mask is unchanged (i.e.,
.I how
is ignored),
but the current value of the signal mask is nevertheless returned in
.I oldset
(if it is not NULL).

The use of
.BR sigprocmask ()
is unspecified in a multithreaded process; see
.BR pthread_sigmask (3).
.SH RETURN VALUE
.BR sigprocmask ()
returns 0 on success and \-1 on error.
In the event of an error,
.I errno
is set to indicate the cause.
.SH ERRORS
.TP
.B EFAULT
the
.I set
or
.I oldset
argument points outside the process's allocated address space.
.TP
.B EINVAL
The value specified in
.I how
was invalid.
.SH CONFORMING TO
POSIX.1-2001.
.SH NOTES
It is not possible to block
.BR SIGKILL " or " SIGSTOP .
Attempts to do so are silently ignored.

Each of the threads in a process has its own signal mask.

A child created via
.BR fork (2)
inherits a copy of its parent's signal mask;
the signal mask is preserved across
.BR execve (2).

If
.BR SIGBUS ,
.BR SIGFPE ,
.BR SIGILL ,
or
.B SIGSEGV
are generated
while they are blocked, the result is undefined,
unless the signal was generated by
.BR kill (2),
.BR sigqueue (3),
or
.BR raise (3).
.PP
See
.BR sigsetops (3)
for details on manipulating signal sets.
.SH SEE ALSO
.BR kill (2),
.BR pause (2),
.BR sigaction (2),
.BR signal (2),
.BR sigpending (2),
.BR sigsuspend (2),
.BR pthread_sigmask (3),
.BR sigqueue (3),
.BR sigsetops (3),
.BR signal (7)
