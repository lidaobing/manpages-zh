.\" Copyright (C) Michael Kerrisk, 2004
.\"	using some material drawn from earlier man pages
.\"	written by Thomas Kuhn, Copyright 1996
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH MLOCK 2 2011-09-14 "Linux" "Linux Programmer's Manual"
.SH NAME
mlock, munlock, mlockall, munlockall \- lock and unlock memory
.SH SYNOPSIS
.nf
.B #include <sys/mman.h>
.sp
.BI "int mlock(const void *" addr ", size_t " len );
.BI "int munlock(const void *" addr ", size_t " len );
.sp
.BI "int mlockall(int " flags );
.B int munlockall(void);
.fi
.SH DESCRIPTION
.BR mlock ()
and
.BR mlockall ()
respectively lock part or all of the calling process's virtual address
space into RAM, preventing that memory from being paged to the
swap area.
.BR munlock ()
and
.BR munlockall ()
perform the converse operation,
respectively unlocking part or all of the calling process's virtual
address space, so that pages in the specified virtual address range may
once more to be swapped out if required by the kernel memory manager.
Memory locking and unlocking are performed in units of whole pages.
.SS mlock() and munlock()
.BR mlock ()
locks pages in the address range starting at
.I addr
and continuing for
.I len
bytes.
All pages that contain a part of the specified address range are
guaranteed to be resident in RAM when the call returns successfully;
the pages are guaranteed to stay in RAM until later unlocked.

.BR munlock ()
unlocks pages in the address range starting at
.I addr
and continuing for
.I len
bytes.
After this call, all pages that contain a part of the specified
memory range can be moved to external swap space again by the kernel.
.SS mlockall() and munlockall()
.BR mlockall ()
locks all pages mapped into the address space of the
calling process.
This includes the pages of the code, data and stack
segment, as well as shared libraries, user space kernel data, shared
memory, and memory-mapped files.
All mapped pages are guaranteed
to be resident in RAM when the call returns successfully;
the pages are guaranteed to stay in RAM until later unlocked.

The
.I flags
argument is constructed as the bitwise OR of one or more of the
following constants:
.TP 1.2i
.B MCL_CURRENT
Lock all pages which are currently mapped into the address space of
the process.
.TP
.B MCL_FUTURE
Lock all pages which will become mapped into the address space of the
process in the future.
These could be for instance new pages required
by a growing heap and stack as well as new memory mapped files or
shared memory regions.
.PP
If
.B MCL_FUTURE
has been specified, then a later system call (e.g.,
.BR mmap (2),
.BR sbrk (2),
.BR malloc (3)),
may fail if it would cause the number of locked bytes to exceed
the permitted maximum (see below).
In the same circumstances, stack growth may likewise fail:
the kernel will deny stack expansion and deliver a
.B SIGSEGV
signal to the process.

.BR munlockall ()
unlocks all pages mapped into the address space of the
calling process.
.SH RETURN VALUE
On success these system calls return 0.
On error, \-1 is returned,
.I errno
is set appropriately, and no changes are made to any locks in the
address space of the process.
.SH ERRORS
.TP
.B ENOMEM
(Linux 2.6.9 and later) the caller had a nonzero
.B RLIMIT_MEMLOCK
soft resource limit, but tried to lock more memory than the limit
permitted.
This limit is not enforced if the process is privileged
.RB ( CAP_IPC_LOCK ).
.TP
.B ENOMEM
(Linux 2.4 and earlier) the calling process tried to lock more than
half of RAM.
.\" In the case of mlock(), this check is somewhat buggy: it doesn't
.\" take into account whether the to-be-locked range overlaps with
.\" already locked pages.  Thus, suppose we allocate
.\" (num_physpages / 4 + 1) of memory, and lock those pages once using
.\" mlock(), and then lock the *same* page range a second time.
.\" In the case, the second mlock() call will fail, since the check
.\" calculates that the process is trying to lock (num_physpages / 2 + 2)
.\" pages, which of course is not true.  (MTK, Nov 04, kernel 2.4.28)
.TP
.B EPERM
The caller is not privileged, but needs privilege
.RB ( CAP_IPC_LOCK )
to perform the requested operation.
.\"SVr4 documents an additional EAGAIN error code.
.LP
For
.BR mlock ()
and
.BR munlock ():
.TP
.B EAGAIN
Some or all of the specified address range could not be locked.
.TP
.B EINVAL
The result of the addition
.IR start + len
was less than
.IR start
(e.g., the addition may have resulted in an overflow).
.TP
.B EINVAL
(Not on Linux)
.I addr
was not a multiple of the page size.
.TP
.B ENOMEM
Some of the specified address range does not correspond to mapped
pages in the address space of the process.
.LP
For
.BR mlockall ():
.TP
.B EINVAL
Unknown \fIflags\fP were specified.
.LP
For
.BR munlockall ():
.TP
.B EPERM
(Linux 2.6.8 and earlier) The caller was not privileged
.RB ( CAP_IPC_LOCK ).
.SH CONFORMING TO
POSIX.1-2001, SVr4.
.SH AVAILABILITY
On POSIX systems on which
.BR mlock ()
and
.BR munlock ()
are available,
.B _POSIX_MEMLOCK_RANGE
is defined in \fI<unistd.h>\fP and the number of bytes in a page
can be determined from the constant
.B PAGESIZE
(if defined) in \fI<limits.h>\fP or by calling
.IR sysconf(_SC_PAGESIZE) .

On POSIX systems on which
.BR mlockall ()
and
.BR munlockall ()
are available,
.B _POSIX_MEMLOCK
is defined in \fI<unistd.h>\fP to a value greater than 0.
(See also
.BR sysconf (3).)
.\" POSIX.1-2001: It shall be defined to -1 or 0 or 200112L.
.\" -1: unavailable, 0: ask using sysconf().
.\" glibc defines it to 1.
.SH NOTES
Memory locking has two main applications: real-time algorithms and
high-security data processing.
Real-time applications require
deterministic timing, and, like scheduling, paging is one major cause
of unexpected program execution delays.
Real-time applications will
usually also switch to a real-time scheduler with
.BR sched_setscheduler (2).
Cryptographic security software often handles critical bytes like
passwords or secret keys as data structures.
As a result of paging,
these secrets could be transferred onto a persistent swap store medium,
where they might be accessible to the enemy long after the security
software has erased the secrets in RAM and terminated.
(But be aware that the suspend mode on laptops and some desktop
computers will save a copy of the system's RAM to disk, regardless
of memory locks.)

Real-time processes that are using
.BR mlockall ()
to prevent delays on page faults should reserve enough
locked stack pages before entering the time-critical section,
so that no page fault can be caused by function calls.
This can be achieved by calling a function that allocates a
sufficiently large automatic variable (an array) and writes to the
memory occupied by this array in order to touch these stack pages.
This way, enough pages will be mapped for the stack and can be
locked into RAM.
The dummy writes ensure that not even copy-on-write
page faults can occur in the critical section.

Memory locks are not inherited by a child created via
.BR fork (2)
and are automatically removed (unlocked) during an
.BR execve (2)
or when the process terminates.

The memory lock on an address range is automatically removed
if the address range is unmapped via
.BR munmap (2).

Memory locks do not stack, that is, pages which have been locked several times
by calls to
.BR mlock ()
or
.BR mlockall ()
will be unlocked by a single call to
.BR munlock ()
for the corresponding range or by
.BR munlockall ().
Pages which are mapped to several locations or by several processes stay
locked into RAM as long as they are locked at least at one location or by
at least one process.
.SS Linux notes
Under Linux,
.BR mlock ()
and
.BR munlock ()
automatically round
.I addr
down to the nearest page boundary.
However, POSIX.1-2001 allows an implementation to require that
.I addr
is page aligned, so portable applications should ensure this.

The
.I VmLck
field of the Linux-specific
.I /proc/PID/status
file shows how many kilobytes of memory the process with ID
.I PID
has locked using
.BR mlock (),
.BR mlockall (),
and
.BR mmap (2)
.BR MAP_LOCKED .
.SS Limits and permissions
In Linux 2.6.8 and earlier,
a process must be privileged
.RB ( CAP_IPC_LOCK )
in order to lock memory and the
.B RLIMIT_MEMLOCK
soft resource limit defines a limit on how much memory the process may lock.

Since Linux 2.6.9, no limits are placed on the amount of memory
that a privileged process can lock and the
.B RLIMIT_MEMLOCK
soft resource limit instead defines a limit on how much memory an
unprivileged process may lock.
.SH BUGS
In the 2.4 series Linux kernels up to and including 2.4.17,
a bug caused the
.BR mlockall ()
.B MCL_FUTURE
flag to be inherited across a
.BR fork (2).
This was rectified in kernel 2.4.18.

Since kernel 2.6.9, if a privileged process calls
.I mlockall(MCL_FUTURE)
and later drops privileges (loses the
.B CAP_IPC_LOCK
capability by, for example,
setting its effective UID to a nonzero value),
then subsequent memory allocations (e.g.,
.BR mmap (2),
.BR brk (2))
will fail if the
.B RLIMIT_MEMLOCK
resource limit is encountered.
.\" See the following LKML thread:
.\" http://marc.theaimsgroup.com/?l=linux-kernel&m=113801392825023&w=2
.\" "Rationale for RLIMIT_MEMLOCK"
.\" 23 Jan 2006
.SH SEE ALSO
.BR mmap (2),
.BR setrlimit (2),
.BR shmctl (2),
.BR sysconf (3),
.BR proc (5),
.BR capabilities (7)
